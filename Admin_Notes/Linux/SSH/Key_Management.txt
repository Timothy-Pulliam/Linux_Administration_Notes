Content-Type: text/x-zim-wiki
Wiki-Format: zim 0.4
Creation-Date: 2017-09-23T13:25:02-04:00

====== Key Management ======
Created Saturday 23 September 2017

==== Overview ====
Based on the National Institute of Standards and Technology NISTIR 7966.
http://nvlpubs.nist.gov/nistpubs/ir/2015/NIST.IR.7966.pdf

==== Verifying Server Public keys ====
When SSHing into a system for the first time, you will be presented with the server's public host key. It is both the SA's and others jobs to ensure the public key presented is truly that of the system they think is. This is the best defense against MiTM attacks.

'''
[tim@client ~]$ ssh tim@server.home
The authenticity of host 'server.home (192.168.1.212)' can't be established.
ECDSA key fingerprint is SHA256:zUXv8/paSO15FxzRLjqxaCnzMvW3l1ed0gLj2PUQRyk.
ECDSA key fingerprint is MD5:27:ee:37:d2:c9:cb:65:d3:de:e9:14:a8:b3:41:dc:c5.
Are you sure you want to continue connecting (yes/no)?
'''

In order to truly do this, you would need to already have access to the server and verify the key with the command below.
'''
[tim@server ~]$ ssh-keygen -lvf /etc/ssh/ssh_host_ecdsa_key.pub 
256 SHA256:zUXv8/paSO15FxzRLjqxaCnzMvW3l1ed0gLj2PUQRyk no comment (ECDSA)
'''

'''
+---[ECDSA 256]---+
|            . .oo|
|           . E oo|
|            . =o |
|         o +.+o.o|
|        S *o++B++|
|        o.=o++ O=|
|         * . .+.O|
|        o . . .+=|
|         o   .+=o|
+----[SHA256]-----+
'''



However if you do not have permission to do this (I.E. you are not an admin) it is the responsibility of the SA to provide the public key to users so they can verify the identity of the server they are logging into. For example, an SA can gather the fingerprints of all public keys for a server, place them in a text file and place them on the internal network on a secure website (HTTPS) or on a SFTP server.
'''
[tim@server ssh]$ for pubkey in $(ls *.pub); do   ssh-keygen -lf $pubkey >> ~/server.home.pubkeys; done
[tim@server ssh]$ cat ~/server.home.pubkeys 
256 SHA256:zUXv8/paSO15FxzRLjqxaCnzMvW3l1ed0gLj2PUQRyk no comment (ECDSA)
256 SHA256:7CODQ1WfrXa7+d2GV9ixE6HdoAcE1lw5IuVKUiTeUF8 no comment (ED25519)
2048 SHA256:mgKR1ww28WOTtFgJBbiURfVT5GPLhxiKP0iSG7oc+Q0 no comment (RSA)
'''

Another way to get a host's public SSH keys, is to run the **ssh-keyscan** command, which will return all known public keys for a given server name. If you do this, you should assume the hosts have already been compromised and still verify that the public keys returned are in fact correct to avoid MiTM attacks.

__TODO SSH KEYSCAN diff against known ssh keys__
'''
[vagrant@server .ssh]$ ssh client
The authenticity of host 'client (192.168.1.41)' can't be established.
ECDSA key fingerprint is SHA256:fDiGwhI+HUtHbkMr+XpqgfCx8jKoDDbPYn8I000AHmk.
ECDSA key fingerprint is MD5:48:f0:01:21:3f:dc:3c:71:c2:0a:05:b8:b4:c5:95:a5.
Are you sure you want to continue connecting (yes/no)? no
Host key verification failed.
[vagrant@server .ssh]$ ssh-keyscan client >> known_hosts
[vagrant@server .ssh]$ ssh client				
'''
__← No longer prompted to cache host's public key__
''Warning: Permanently added the ECDSA host key for IP address '192.168.1.41' to the list of known hosts.''
''vagrant@client's password: ''
''Last login: Sun Sep 24 01:22:22 2017 from 192.168.1.212''
''[vagrant@client ~]$'' 

==== Preventing Man in the Middle Attacks ====
If you ever get a message similar to the one below, your server may very well be compromised. Contact your SA immediately and **DO NOT CONNECT TO THE SERVER**.
'''
vagrant@server .ssh]$ ssh client
@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@
@    WARNING: REMOTE HOST IDENTIFICATION HAS CHANGED!     @
@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@
IT IS POSSIBLE THAT SOMEONE IS DOING SOMETHING NASTY!
Someone could be eavesdropping on you right now (man-in-the-middle attack)!
It is also possible that a host key has just been changed.
The fingerprint for the ECDSA key sent by the remote host is
SHA256:fDiGwhI+HUtHbkMr+XpqgfCx8jKoDDbPYn8I000AHmk.
Please contact your system administrator.
Add correct host key in /home/vagrant/.ssh/known_hosts to get rid of this message.
Offending ECDSA key in /home/vagrant/.ssh/known_hosts:1
ECDSA host key for client has changed and you have requested strict checking.
Host key verification failed.
'''


==== Hashing Known Hosts Entries ====
By default, hostnames in the $HOME/.ssh/known_hosts file are in plaintext. If a hacker or angry admin wants to, they can steal this file and know which host has which public key. A way to prevent this is to hash hostnames. There are two ways to do this

* **ssh-keygen -H** will hash all current hostnames and IP addresses in the ~/.ssh/known_hosts
'''
[vagrant@server .ssh]$ ssh-keygen -H
/home/vagrant/.ssh/known_hosts updated.
Original contents retained as /home/vagrant/.ssh/known_hosts.old
WARNING: /home/vagrant/.ssh/known_hosts.old contains unhashed entries
Delete this file to ensure privacy of hostnames
'''
* In [[/etc/ssh/ssh_config]] set **HashKnownHosts yes** to hash all future entries to [[~/.ssh/known_hosts]]
'''
[root@server .ssh]# vi /etc/ssh/ssh_config 
Host *
    HashKnownHosts yes
'''


==== Creating and Using SSH Keys ====
* Create user's RSA keys on client system.
__NOTE: Make sure you back up your SSH public and private keypair in a safe and secure manner (GPG encrypt on offline flash drive). If you lose them, they get corrupted or your machine breaks, you will not be able to access any of your systems with your keys!__
	 ''[tim@client ~]$ ssh-keygen -t rsa''

* copy the public key onto the server 
__NOTE: Usually passwords will be disabled at this point and you would have to give your public key to your SA so they can add you the server's authorized_keys file. I show another way just for demonstration purposes.__
'''
[tim@client ~]$ scp .ssh/id_rsa.pub vagrant@server.home:/home/vagrant/
vagrant@server.home's password: 
id_rsa.pub                                    100%  397   340.1KB/s   00:00
'''
    

* On the server, append the contents of this file to the target user's $HOME/.ssh/authorized_keys file
	 ''[vagrant@server ~]$ cat id_rsa.pub >> .ssh/authorized_keys'' 

* Also on the server, make the following changes to [[/etc/ssh/sshd_config]] to disable password and enable pulic key authentication.
'''
PubkeyAuthentication yes
PasswordAuthentication no
ChallengeResponseAuthentication no
'''

* Reload sshd (without terminating current connections) and then log into the server
'''
[root@server ~]# systemctl reload sshd
[tim@client ~]$ ssh vagrant@server.home
Last login: Sun Sep 24 17:15:56 2017
[vagrant@server ~]$
'''
 
As you can see, creating and using user public keys is very easy. The trouble occurs when dealing with hundreds of such keys. How do you create, distribute, manage, and dispose of the keys in a secure and consistent but efficient way?

==== Using SSH Agent to Avoid Typing Private Key Passphrases ====
* Usually when you SSH into another system using your public key, you must decrypt your private key with your passphrase. This can be very annoying if you SSH dozens of times, or if you are trying to automate with scripts.
'''
[tim@client ~]$ ssh vagrant@server
Enter passphrase for key '/home/tim/.ssh/id_rsa':
'''
 
* ssh-agent is started at the beginning of a terminal session
	 ''[tim@client ~]$ ssh-agent /bin/bash''
* Next decrypt private keys and add them to the agent
'''
[tim@client ~]$ ssh-add
Enter passphrase for /home/tim/.ssh/id_rsa: 
Identity added: /home/tim/.ssh/id_rsa (/home/tim/.ssh/id_rsa)
Identity added: /home/tim/.ssh/id_dsa (/home/tim/.ssh/id_dsa)
'''
* You can now ssh to other systems without entering the passphrase to decrypt your private key.
'''
[tim@client ~]$ ssh vagrant@server
Last login: Sun Sep 24 17:33:04 2017 from 192.168.1.41
[vagrant@server ~]$
'''
 


==== Server Authentication (.pub key exchange) ====

==== MISC ====
* Each host/user should have their own key pair (to minimize damage in case a key pair gets compromised).
* Each host/user should have several key pairs, each supporting a differenct encryption algorithm (RSA, DSA, ECDSA) in case a flaw is found in any of the algorithms or OpenSSH's implementation of them.
