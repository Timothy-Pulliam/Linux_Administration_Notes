Content-Type: text/x-zim-wiki
Wiki-Format: zim 0.4
Creation-Date: 2017-09-27T20:38:20-04:00

====== Scripting ======
Created Wednesday 27 September 2017

==== Executing Scripts from Anywhere ====
If you want to make sure your scripts are executable from anywhere you can place them in [[~/bin.]]

'''
$ mkdir ~/bin
$ vi ~/bin/my_script.sh
$ chmod 755 ~/bin/my_script.sh
'''


Make sure [[~/bin]] is in your path
	 ''$ echo $PATH''

if not, you will need to add it to your path
'''
$ echo "export PATH=$PATH:~/bin" >> ~/.bash_profile
$ source ~/.bash_profile
'''


You can now run the script from anywhere
'''
$ cd /tmp
$ my_script.sh
'''


==== Getting User Input ====
Standard method is the following
'''
echo -e "What is your name?"
read name
echo -e "Your name is $name\n"

$ name.sh 
What is your name?
tim
Your name is tim

'''

You can also use a carriage return for the prompt to be on the same line as the input. This has an aesthetic appeal.
'''
echo -e "Enter your name: \c"
read name
echo -e "Your name is $name\n"
'''


'''
$ name.sh 
Enter your name: tim
Your name is tim
'''


==== Advanced User Input ====
'''
echo -e "Is this the syslog client or server? (client / server)";
select response in "Client" "Server"; do
    case $response in
        Client )   
               echo -e "We need to append the Syslog Server to /etc/rsyslog.conf\n";
               echo -e "IPv4 interface for log server?\n";
               read server;
               echo -e "*.*	@@(z9)$server:514" >> /etc/rsyslog.conf;
               break;;
        Server ) 
               echo -e "Copying remote config file to /etc/rsyslog.d/remote.conf";
               cp remote.conf /etc/rsyslog.d/;
               mkdir -v -p /var/log/rsyslog-remote/; # These are where logs for remote hosts are kept
               echo -e "Opening TCP port 514\n";
               firewall-cmd --permanent --add-port=514/tcp;
               firewall-cmd --add-port=514/tcp;
               iptables -I INPUT 1 --protocol tcp --dport 514 --jump ACCEPT;
	       iptables-save;
               break;;
    esac
done
'''





==== Using command line arguments ====
* Consider the script below

'''
#!/bin/bash

echo -e "you entered $# arguments. They are displayed below\n"
echo -e "$*"
echo -e "The name of this script is $0"
echo -e "The first argument is $1"
echo -e "The eleventh argument is ${11}"
echo -e "The PID of this script is $$"
ps -elf | grep $$
'''


* If we called the script in the following way, we would get the following output
'''
[vagrant@test /]$ get_args.sh once upon a time there was a lovely women named nicole. She was very cute!
you entered 15 arguments. They are displayed below

once upon a time there was a lovely women named nicole. She was very cute!
The name of this script is /home/vagrant/bin/get_args.sh
The first argument is once
The eleventh argument is nicole.
The PID of this script is 9449
0 S vagrant   9449 18037  0  80   0 - 28283 do_wai 19:11 pts/0    00:00:00 /bin/bash /home/vagrant/bin/get_args.sh once upon a time there was a lovely women named nicole. She was very cute!
0 R vagrant   9450  9449  0  80   0 - 37766 -      19:11 pts/0    00:00:00 ps -elf
0 R vagrant   9451  9449  0  80   0 - 28165 -      19:11 pts/0    00:00:00 grep 9449
'''


==== Comparisons / Test Conditions ====

== Integer Tests ==
* -eq (==)
* -ne (!=)
* -lt (<)
* -gt (>)
* -le (<=)
* -ge (>=)

For example, to test if one number is greater than another

'''
#!/bin/bash

echo -e "Enter two numbers to compare"
read num1
read num2
if [ $num1 -qt $num2 ]
'''
__;__
''then''
''  echo -e "$num1 > $num2"''
''elif [ $num1 -lt $num2 ]''__;__
''then''
''  echo -e "$num1 < $num2"''
''else''
''  echo -e "$num1 == $num2"''
''fi''


==== A Simple Backup Script Using rsync ====
'''
#!/bin/bash

mkdir $(date "+%Y-%m-%d") && cd $(date "+%Y-%m-%d")
rsync -avr /Volumes/BACKUP/Files .
tar -cvpzf Files.tar.gz Files
rm -fr Files
'''


==== Sorting numerical data with sort ====
The following dailyprogrammer.reddit.com challenge has a good example of the power of the sort utility.
https://www.reddit.com/r/dailyprogrammer/comments/72ivih/20170926_challenge_333_easy_packet_assembler/

==== Sample Scripts ====

== IPA useradd ==
Notice the use of parameter expansion which automatically converts uppercase strings to lowercase
https://www.gnu.org/software/bash/manual/html_node/Shell-Parameter-Expansion.html

'''
#!/bin/bash

echo -n "First Name     : "
read first
echo -n "Last Name      : "
read last

displayname=$(echo $first | cut -b 1)$last

ipa user-add $displayname  --first=$first --last=$last --displayname=$displayname --homedir=/beegfs/users/${displayname,,} --shell=/bin/bash --email=${first,,}.${last,,}@example.com --password

# Check to make sure the user information is correct
echo -e "\nInformation Correct? (Y/n)"
read response
if [[ ${response,,} = y* ]]; then
  exit;
else
  ipa user-del $displayname;
fi
'''



