Content-Type: text/x-zim-wiki
Wiki-Format: zim 0.4
Creation-Date: 2018-01-10T14:30:11-05:00

====== GCC ======
Created Wednesday 10 January 2018

==== glibc ====
http://www.linfo.org/create_c1.html
glibc is GNUs implementation of the C standard Library. This is important because this is the standard library that Linux uses as their official C standard library. It must be installed and can usually be installed like so
$ yum install glibc
$ yum info glibc
$ locate glibc

== How to compile with gcc ==
$ vim hello.c
'''
#include <stdio.h>

main()
{
	printf("Hello World\n");
}
'''


$ gcc hello.c
$ ls
a.out  hello.c
$ ./a.out 
Hello World

What happened?
https://www.calleerlandsson.com/the-four-stages-of-compiling-a-c-program/

== 1) Preprocessing ==
The line 
**#include <stdio.h>**

Instructs the C preprocesser to literally take the (glibc-headers) header file located at **/usr/include/stdio.h** and attach it to the beginning of this program. This header file contains definitions, constants, variables, etc that are often times specific to the type of operating system and architecture that is running (GNU/Linux, x86, x86_64). See **uname -a** for more info.

== 2) Compilation to assembly / assembled code to binary ==
This is actually two steps. The C source code ges compiled into [[https://en.wikipedia.org/wiki/Machine_code|Machine code]] for the assembler. Machine Code is CPU architecture specific (x86, x86_64, SPARC, ARM, etc.) .The assembler then takes this code and turns it into binary.

== 3) The dynamic linker/loader ==
The dynamic linker/loader , **ld**.**so**, searches for shared objects (dynamic libraries) in the following order
* [[/etc/ld.so.preload]] (if it exists). This loads any shared objects before the executable starts.
https://superuser.com/questions/1183037/what-is-does-ld-so-preload-do
* Directories specified by **LD_LIBRARY_PATH** user environment variable
* From the system wide cache file **/etc/ld.so.cache**, which contains a compiled list of candidate shared objects previously found in the augmented library path. This file can be updated by adding entries to **/etc/ld.so.conf** and running **ldconfig**.
* In the default path /lib, and then [[/usr/lib,]] [[/usr/lib64.]]
http://man7.org/linux/man-pages/man8/ld.so.8.html

It then combines all of these shared object files together to form a fully functioning executable.


==== static vs dynamic linking ====
http://cs-fundamentals.com/c-programming/static-and-dynamic-linking-in-c.php
https://stackoverflow.com/questions/14884126/build-so-file-from-c-file-using-gcc-command-line

== Manually linking two object files ==
**add.h**
''int add(int, int);''

**add.c**
'''
int add(int a, int b)
{       
        return(a + b);
}
'''
 

**main.c**
'''
#include <stdio.h>
#include <add.h>

int main()
{       
        int x=3, y=10;
        printf("\n%d + %d = %d\n", x, y, add(x,y));
        return 0;
}
'''
    

'''
$ gcc -I . -c main.c
$ gcc -o add.o add.c
$ gcc -o main main.o add.o
$ ./main

3 + 10 = 13
'''

The final executable has now been statically linked against the .so (shared object) and .h (header) files. In other words, we can delete those files file and the main executable will still run since it contains all necessary information to run. The final executable is entirely self contained.
'''
$ rm add.o
$ rm add.h
$ ./main

3 + 10 = 13
'''


== Creating a static library file (.a) ==
**math.h**
''int add(int, int);''
''int sub(int, int);''

**add.c**
'''
int add(int a, int b)
{       
        return(a + b);
}
'''
 
**sub.c**
'''
int sub(int a, int b)
{
'''
	'''
	return(a - b);
	}
	'''


**main.c**
'''
#include <stdio.h>
#include <math.h>

int main()
{       
        int x=3, y=10;
        printf("%d + %d = %d\n", x, y, add(x,y));
	printf("%d - %d = %d\n", x, y, sub(x,y));
        return 0;
}
'''
    

'''
$ gcc -c add.c
$ gcc -c sub.c
Link the two math .o files into a single static library (archive). 
'''
__NOTE: it is necessary that that the name of your library start with "lib" (libfoo.a, libfoo.so) otherwise the linker won't be able to find it.__
''$ ar rs libmath.a add.o sub.o''
''Compile the main object file''
''$ gcc -I . -c main.c''
''Link all of the executables''
''$ gcc -o main -L . main -lmath''
''$ ./main''
''10 + 2 = 12''
''10 - 2 = 8''

''You can use either of the following commands to link the main object file to the static library containing the subroutines. However ''__omit lib from libmath when using -l flag__
''* $ gcc -o main main.o libmath.a''
	 * $ gcc -o main -L . main.o -lmath

== Dynamically linking files ==
http://cs-fundamentals.com/c-programming/static-and-dynamic-linking-in-c.php#what-is-dynamic-linking

== misc ==
$ gcc -c -fPIC hello.c -o hello.o
$ gcc hello.o -shared -o libhello.so
