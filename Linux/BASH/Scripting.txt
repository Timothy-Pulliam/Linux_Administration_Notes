Content-Type: text/x-zim-wiki
Wiki-Format: zim 0.4
Creation-Date: 2017-09-27T20:38:20-04:00

====== Scripting ======
Created Wednesday 27 September 2017

==== Google Shell Style Guide ====
https://google.github.io/styleguide/shell.xml?utm_source=DigitalOcean_Newsletter
When possible, try to adhere to Google's Shell scripting Style guide.

==== Executing Scripts from Anywhere ====
If you want to make sure your scripts are executable from anywhere you can place them in [[~/bin.]]

'''
$ mkdir ~/bin
$ vi ~/bin/my_script.sh
$ chmod 755 ~/bin/my_script.sh
'''


Make sure [[~/bin]] is in your path
	 ''$ echo $PATH''

if not, you will need to add it to your path
'''
$ echo "export PATH=$PATH:~/bin" >> ~/.bash_profile
$ source ~/.bash_profile
'''


You can now run the script from anywhere
'''
$ cd /tmp
$ my_script.sh
'''


==== If Statements ====
A general if statement. For example, to test if one number is greater than another. Note the placement of the semicolons is very important. A semicolon is placed after every if/elif 
'''

#!/bin/bash

echo -e "Enter two numbers to compare"
read num1
read num2

if [ $num1 -qt $num2 ];
then
  echo -e "$num1 > $num2"
elif [ $num1 -lt $num2 ];
then
  echo -e "$num1 < $num2"
else
  echo -e "$num1 == $num2"
fi
'''


==== Comparisons / Test Conditions ====
http://tldp.org/LDP/Bash-Beginners-Guide/html/sect_07_01.html


== Difference Between [ ], [[ ]], ( ), (( )) ==
https://unix.stackexchange.com/questions/306111/what-is-the-difference-between-the-bash-operators-vs-vs-vs
if [ condition ]

This is the traditional shell test command. It is available on all POSIX shells. The test command sets an exit code and the if statement acts accordingly. Typical tests are whether a file exists or one number is equal to another.

if [[ condition ]]

This is a new upgraded variation on test from ksh that bash and zsh also support. This test command also sets an exit code and the if statement acts accordingly. Among its extended features, it can test whether a string matches a regular expression.

if ((condition))

Another ksh extension that bash and zsh also support. This performs arithmetic. As the result of the arithmetic, an exit code is set and the if statement acts accordingly. It returns an exit code of zero (true) if the result of the arithmetic calculation is nonzero. Like [[...]], this form is not POSIX and therefore not portable.

if (command)

This runs command in a subshell. When command completes, it sets an exit code and the if statement acts accordingly.

A typical reason for using a subshell like this is to limit side-effects of command if command required variable assignments or other changes to the shell's environment. Such changes do not remain after the subshell completes.

if command

command is executed and the if statement acts according to its exit code.

== Integer Comparisons ==
* -eq (==)
* -ne (!=)
* -lt (<)
* -gt (>)
* -le (<=)
* -ge (>=)

== String Comparisons ==
[ -z $string ] true if length of string is zero
[ -n STRING ] or [ STRING ] true if length of string is NOT zero
[ STRING1 == STRING2 ] True if the strings are equal. "=" may be used instead of "==" for strict POSIX compliance.
[ STRING1 != STRING2 ] True if the strings are not equal.
[ STRING1 < STRING2 ] True if "STRING1" sorts before "STRING2" lexicographically in the current locale.
[ STRING1 > STRING2 ] True if "STRING1" sorts after "STRING2" lexicographically in the current locale.

== File Tests ==
[ -e $file ] true if file exists
[ -d $file ] true if file exists and is directory
[ -f $file ] true if file exists and is regular file
[ -r $file ] true if file exists and is readable
[ -s $file ] true if file exists and its size is greater than zero
[ -w $file ] '' and is writable
[ -x $file ] '' and is executable
[ -N $file ] '' and has been modified since it was last read
[ FILE1 -nt FILE2 ] True if FILE1 has been changed more recently than FILE2, or if FILE1 exists and FILE2 does not.
[ FILE1 -ot FILE2 ] True if FILE1 is older than FILE2, or is FILE2 exists and FILE1 does not.
[ FILE1 -ef FILE2 ] 	True if FILE1 and FILE2 refer to the same device and inode numbers. (They are hard linked to the same inode)

==== Boolean Operations (Combining Operations) ====
[ ! EXPR ] True if EXPR is false.
[ ( EXPR ) ] 	Returns the value of EXPR. This may be used to override the normal precedence of operators.
[ EXPR1 -a EXPR2 ]  True if both EXPR1 and EXPR2 are true.
[ EXPR1 -o EXPR2 ]  True if either EXPR1 or EXPR2 is true.

==== Shell Tests ====
[ -o [[OptionName]] ]     True if shell option "OPTIONNAME" is enabled.

==== For Loops ====
There are a few ways to do a for loop, below are the most common ways

'''
#!/bin/bash
echo "printing multiples of 2"
for i in {0..10..2}
  do 
     echo "$i"
 done
'''


This method of a for loop is a bit ugly, but still works
'''
#!/bin/bash
echo "counting from 1 to 5"
for (( c=1; c<=5; c++ ))
do  
   echo "$c"
done
'''


For loops can also iterate over the output of a command
'''
#!/bin/bash
echo "iterate over the contents of a file"
for host in $(cat hosts)
do
  ping $host
done
'''


==== While Loops ====


==== Getting User Input ====
Standard method is the following
'''
echo -e "What is your name?"
read name
echo -e "Your name is $name\n"

$ name.sh 
What is your name?
tim
Your name is tim

'''

You can also use a carriage return for the prompt to be on the same line as the input. This has an aesthetic appeal.
'''
echo -e "Enter your name: \c"
read name
echo -e "Your name is $name\n"
'''


'''
$ name.sh 
Enter your name: tim
Your name is tim
'''


==== Brace Expansion ====
https://www.tldp.org/LDP/abs/html/special-chars.html#BRACEEXPREF
Brace expansion must be enabled
$ set -B

'''
$ echo {a..z}
a b c d e f g h i j k l m n o p q r s t u v w x y z

$ echo {A..Z}
A B C D E F G H I J K L M N O P Q R S T U V W X Y Z

$ echo {A..z}
A B C D E F G H I J K L M N O P Q R S T U V W X Y Z [  ] ^ _ ` a b c d e f g h i j k l m n o p q r s t u v w x y z

$ echo {0..10}
0 1 2 3 4 5 6 7 8 9 10

$ echo {0..10..2}
0 2 4 6 8 10

Array of base64 characters
$ base64_charset_array=( {A..Z} {a..z} {0..9} + / = )
$ echo ${base64_charset_array[0]}
A
$ echo ${base64_charset_array[1]}
B
'''


==== Advanced User Input ====
'''
echo -e "Is this the syslog client or server? (client / server)";
select response in "Client" "Server"; do
    case $response in
        Client )   
               echo -e "We need to append the Syslog Server to /etc/rsyslog.conf\n";
               echo -e "IPv4 interface for log server?\n";
               read server;
               echo -e "*.*	@@(z9)$server:514" >> /etc/rsyslog.conf;
               break;;
        Server ) 
               echo -e "Copying remote config file to /etc/rsyslog.d/remote.conf";
               cp remote.conf /etc/rsyslog.d/;
               mkdir -v -p /var/log/rsyslog-remote/; # These are where logs for remote hosts are kept
               echo -e "Opening TCP port 514\n";
               firewall-cmd --permanent --add-port=514/tcp;
               firewall-cmd --add-port=514/tcp;
               iptables -I INPUT 1 --protocol tcp --dport 514 --jump ACCEPT;
	       iptables-save;
               break;;
    esac
done
'''





==== Using command line arguments ====
http://mywiki.wooledge.org/BashFAQ/035
* Consider the script below

'''
#!/bin/bash

echo -e "you entered $# arguments. They are displayed below\n"
echo -e "$*"
echo -e "The name of this script is $0"
echo -e "The first argument is $1"
echo -e "The eleventh argument is ${11}"
echo -e "The PID of this script is $$"
ps -elf | grep $$
'''


* If we called the script in the following way, we would get the following output
'''
[vagrant@test /]$ get_args.sh once upon a time there was a lovely women named nicole. She was very cute!
you entered 15 arguments. They are displayed below

once upon a time there was a lovely women named nicole. She was very cute!
The name of this script is /home/vagrant/bin/get_args.sh
The first argument is once
The eleventh argument is nicole.
The PID of this script is 9449
0 S vagrant   9449 18037  0  80   0 - 28283 do_wai 19:11 pts/0    00:00:00 /bin/bash /home/vagrant/bin/get_args.sh once upon a time there was a lovely women named nicole. She was very cute!
0 R vagrant   9450  9449  0  80   0 - 37766 -      19:11 pts/0    00:00:00 ps -elf
0 R vagrant   9451  9449  0  80   0 - 28165 -      19:11 pts/0    00:00:00 grep 9449
'''



==== A Simple Backup Script Using rsync ====
'''
#!/bin/bash

mkdir $(date "+%Y-%m-%d") && cd $(date "+%Y-%m-%d")
rsync -avr /Volumes/BACKUP/Files .
tar -cvpzf Files.tar.gz Files
rm -fr Files
'''


==== Sorting numerical data with sort ====
The following dailyprogrammer.reddit.com challenge has a good example of the power of the sort utility.
https://www.reddit.com/r/dailyprogrammer/comments/72ivih/20170926_challenge_333_easy_packet_assembler/

==== Sample Scripts ====

== IPA useradd ==
Notice the use of parameter expansion which automatically converts uppercase strings to lowercase
https://www.gnu.org/software/bash/manual/html_node/Shell-Parameter-Expansion.html

'''
#!/bin/bash

echo -n "First Name     : "
read first
echo -n "Last Name      : "
read last

displayname=$(echo $first | cut -b 1)$last

ipa user-add $displayname  --first=$first --last=$last --displayname=$displayname --homedir=/beegfs/users/${displayname,,} --shell=/bin/bash --email=${first,,}.${last,,}@example.com --password

# Check to make sure the user information is correct
echo -e "\nInformation Correct? (Y/n)"
read response
if [[ ${response,,} = y* ]]; then
  exit;
else
  ipa user-del $displayname;
fi
'''


==== Get password input as hidden text ====
https://stackoverflow.com/questions/4316730/linux-scripting-hiding-user-input-on-terminal
Your input will not show up in stdout, or in the .bash_history

# [[/bin/bash]]
echo "Enter your password"
read -s passwd
echo "your password is $passwd
