Content-Type: text/x-zim-wiki
Wiki-Format: zim 0.4
Creation-Date: 2018-01-08T13:49:41-05:00

====== Setting up a test environment with Vagrant ======
Created Monday 08 January 2018

==== Setting up a Vagrant Test Environment ====
Using Vagrant to set up a test environment. Vagrant has some issues on Windows systems but works well on [[MacOS]] from what I have seen..

1) Download Vagrant
https://www.vagrantup.com/downloads.html
2) Download VirtualBox
https://www.virtualbox.org/wiki/Downloads
3) Find vagrant boxes at the link below. I will be using the **centos/7** box.
https://app.vagrantup.com/boxes/search
4) Navigate to your working directory in a terminal and run the following
	 ''$ mkdir ~/ansible && cd ~/ansible''
'''
$ vagrant init centos/7
$ vagrant up
$ vagrant status
$ vagrant ssh
'''

__NOTE: "vagrant ssh" is an alias for "ssh -i .vagrant/machines/default/virtualbox/private_key vagrant@127.0.0.1:2222__[["]]

5) You should now be in your Centos 7 machine running on the Virtual Box hypervisor. If you ever need to permanently destroy the Vagrant Box along with any information it contained, simply run **vagrant destroy**. If you need to recreate a destroyed box, rerun the **vagrant up** command.
6) Before we can set up ansible, we need to make some config changes to the **Vagrantfile**. Make sure your Vagrantfile matches this Vagrantfile. Below are some highlights of the vagrant file config.

* Give the guest 1GB of memory
'''
config.vm.provider "virtualbox" do |vb|
  vb.memory = "1024"
end

'''
* ''Give the vagrant guest a Bridged IP address on the local network''
   ''config.vm.network "public_network"''

* Sync shared folder in real time
  config.vm.synced_folder ".", "/vagrant", type: "virtualbox"

* ''If ansible is located on the Host system add the following to the Vagrantfile''
'''
# Tell Vagrant to use Ansible to run the ./provisioning/playbook.yml
# Use Ansible located on the host system
config.vm.provision "ansible" do |ansible|
  ansible.playbook = "provisioning/playbook.yml"
  ansible.verbose = "v"
end

'''
* ''If ansible is located on the guest system, add the following to the Vagrantfile''
'''
# Tell Vagrant to use Ansible to run the ./provisioning/playbook.yml
# Use Ansible located on the guest system
config.vm.provision "ansible_local" do |ansible|
  ansible.playbook = "provisioning/playbook.yml"
  ansible.verbose = "v"
end
'''

7) Next, you will need to install virtualbox guest additions kernel drivers and modules, which are necessary for supporting real time shared folders between the guest and host system. You can do this using:
'''
$ vagrant plugin install vagrant-vbguest
$ vagrant reload
'''


8) Create the playbook file and run **vagrant provision**. You will get an error because the playbook.yml file does not contain any plays yet. 
'''
$ mkdir ansible/provisioning/
$ touch provisioning/playbook.yml
$ vagrant provision
'''

9) You can test out a simple playbook by adding the following to your playbook.yml

'''
--- 
- hosts: all
  tasks: 
    -  ping:
'''
 

Next run **vagrant provision** again. If you continue to get errors, try the following:
* Make sure the playbook.yml file is accessible from the host via [[~/ansible/provisioning/playbook.yml]] (if using host's ansible), as well as the guest system via [[/vagrant/provisioning/playbook.yml]] (if using guest's ansible). Vagrant should automatically create a shared folder named **/vagrant** on the guest system that is mapped to the directory where its corresponding Vagrantfile resides. If you make a change on host system, you will need to run **vagrant reload** for the changes to be rsynced to the guest's [[/vagrant]] directory.
* Make sure the syntax of the playbook.yml is valid. You can use a YAML syntax checker such as http://www.yamllint.com/

=== Setting up Ansible on the Vagrant Test environment ===
