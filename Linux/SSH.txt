Content-Type: text/x-zim-wiki
Wiki-Format: zim 0.4
Creation-Date: 2017-09-04T16:29:29-04:00

====== SSH ======
Created Monday 04 September 2017

=== Overview ===
SSH is an application layer protocol used for secure communications with servers. It is based on TCP/IP and the most common implementation is the [[https://www.openssh.com/|OpenSSH]] suite. 

Never let your SSH clients or servers accept SSH version 1.xx connections. Only allow SSH version 2. Version 1 is terribly insecure. This setting can be configured on the server using the **Protocol=** directive.

__TODO DIAGRAM OF DIFFIE HELMEN KEY EXCHANGE__

=== SSHD ===

== Privilege Separation ==
SSHD uses a technique known as [[https://en.wikipedia.org/wiki/Privilege_separation|Privilege Separation]] in order to safeguard against remote exploits and malicious attackers wishing to gain privileges to a remote system. It is therefore important to make sure that this feature is working properly for SSHD. The unprivileged user is used for most things, and the privilged process is used only when needed. 

	 ''tim@client.home $ ssh server.home''
......
'''
tim@server.home $ ps -elf | grep sshd
4 S root       7053      1  0  80   0 - 20593 poll_s 19:09 ?        00:00:00 /usr/sbin/sshd -D
4 S 
'''
**root**''       7156   7053  0  80   0 - 34661 poll_s 19:10 ?        00:00:00 ''**sshd: tim [priv]**
	 ''5 S ''**tim**''        7164   7156  0  80   0 - 34661 poll_s 19:10 ?        00:00:00 ''**sshd: tim@pts/0**


Note that when you log in as the root user, there is no such privilege separation.
	'''
	root@client.home $ ssh server.home
	.....
	root@server.home $ ps -elf | grep sshd
	4 S root       7053      1  0  80   0 - 20593 poll_s 19:09 ?        00:00:00 /usr/sbin/sshd -D
	4 S 
	'''
**root**''       8743   7053  1  80   0 - 34661 poll_s 19:32 ?        00:00:00 sshd: root@pts/0''

== Testing and Debugging SSHD ==
Make sure you can connect to an SSH server from a client and that there are no network/firewall issues. You should be greeted by the OpenSSH banner when you connect via raw TCP.

'''
client.home $ nc server.home 22
SSH-2.0-OpenSSH_6.6.1
'''


If you get one of the following error messages:
	* ''ssh: connect to host server.home port 22: No route to host''
	* Ncat: No route to host
Make sure your server's firewall allows ssh traffic (port 22/tcp).



The SSHD executable is located at the defualt location **/usr/sbin/sshd**. The main configuration file is located at **/etc/ssh/sshd_config**. You can specify the SSHD to load a different config file, or listen on another port using the following syntax.

	''server.home $ /usr/sbin/sshd -f sshd_config.test -p 2022''

* You need to specify the whole absolute path for SSHD (**/usr/sbin/sshd**) 
* Only one SSHD instance can be running per port, per IP address.
* The **ListenAddress** directive in the SSHD config file will overide the **-p** option when specifying a port for it to listen on. For example 
	''LIstenAddress=0.0.0.0:2022''


== /etc/ssh/sshd_config ==
This config file is pretty straight forward. The defaults are all written in comments for ease of administration. For more information on each of directives which can be placed in this file use **man sshd_config**. Below are some useful directives:
* Banner [[/etc/ssh/ssh-banner]]
	Presents the user with a banner //before// they enter their password. The banner is text located in the file specified. Useful for warnings, legal notices, etc. This can have the potential to interfere with automated scripts using ssh so beware.
* PrintMotd [yes|no]
	//After// user has successfully logged in, present the message of the day. The message of the day is located at **/etc/motd**. MOTD is useful for presenting server statistics, hardware usage, and other relavant information specific to the server. For example "Planned maintenance today at 3pm".
* PermitRootLogin [yes|no|without-password|forced-commands-only]
	This should always be set to "no" or at the very least "without-password". You should never be logging in directly as root, you should log in as yourself and then use **sudo**. This is the best way to uphold accountability.
	

=== SSH ===

== SFTP Only Users ==
__TODO FIX THIS USING THE FOLLOWING HOW TO__
https://askubuntu.com/questions/134425/how-can-i-chroot-sftp-only-ssh-users-into-their-homes

You can create users that only have SFTP access (no shell access). Such a configuration can be used for users who only need to copy files from server to server. To set this up, add the following to either [[/etc/ssh/ssh_config]] or [[~/.ssh/config]]

First, create an **sftponly** group and add a user to this group
'''
[root@client ~]# groupadd ftponly
[root@client ~]# useradd ftpuser -G ftponly
'''


'''
[root@server ~]# vi /etc/ssh/sshd_config
Match Group ftponly
    # Confine users in ftponly group to their home directory
    ChrootDirectory %h
    ForceCommand internal-sftp
    AllowTcpForwarding no
'''


'''
[root@client ~]# ssh ftpuser@server
ftpuser@server's password: 
packet_write_wait: Connection to 192.168.1.41 port 22: Broken pipe
'''


