Content-Type: text/x-zim-wiki
Wiki-Format: zim 0.4
Creation-Date: 2017-08-25T15:23:28-04:00

====== Networking ======
Created Friday 25 August 2017

http://linux-ip.net/html/index.html


==== Setting Static Routes ====
https://www.centos.org/docs/5/html/5.2/Deployment_Guide/s1-networkscripts-static-routes.html
The default route can be set in the network script using the **GATEWAY=** setting. Simply edit this setting accordingly and then run
$ ifdown $interface && ifup $interface

You can temporarily add static routes using
$ ip route add dst-network via gateway dev device_name
$ ip route add 192.168.1.0/24 via 192.168.1.1 dev eth0

FYI: If you bring an interface down, any routes that used that interface will be deleted. This happens automatically in the kernel.
If you then bring the interface up again, /etc/sysconfig/static-routes won't be run again, so the routes specified in that file for this interface are lost. However, if you put the routes in the interface-specific file, then they will be restored by the system when you bring the interface up again.
Hence it's better to put the routes in the /etc/sysconfig/network-scripts/route-<interface> file. 

==== ip a output ====

The interface name may have another name or NONE appended after the @ sign. This means that this device is bound to some other device, i.e. packets send through it are encapsulated and sent via the ``master'' device. If the name is NONE, the master is unknown.

http://linux-ip.net/gl/ip-cref/ip-cref-node17.html

https://github.com/spotify/linux/blob/master/include/linux/if.h
man netdevice

									  ''Device flags''
''              IFF_UP            Interface is running.''
''              IFF_BROADCAST     Valid broadcast address set.''
''              IFF_DEBUG         Internal debugging flag.''

''              IFF_LOOPBACK      Interface is a loopback interface.''
''              IFF_POINTOPOINT   Interface is a point-to-point link.''
''              IFF_RUNNING       Resources allocated.''
''              IFF_NOARP         No arp protocol, L2 destination address not set.''
''              IFF_PROMISC       Interface is in promiscuous mode.''
''              IFF_NOTRAILERS    Avoid use of trailers.''
''              IFF_ALLMULTI      Receive all multicast packets.''
''              IFF_MASTER        Master of a load balancing bundle.''
''              IFF_SLAVE         Slave of a load balancing bundle.''
''              IFF_MULTICAST     Supports multicast''
''              IFF_PORTSEL       Is able to select media type via ifmap.''
''              IFF_AUTOMEDIA     Auto media selection active.''
''              IFF_DYNAMIC       The addresses are lost when the interface goes down.''
''              IFF_LOWER_UP      Driver signals L1 up (since Linux 2.6.17)''
''              IFF_DORMANT       Driver signals dormant (since Linux 2.6.17)''
''              IFF_ECHO          Echo sent packets (since Linux 2.6.25)''

The interface flags are summarized in the angle brackets.

* UP -- the device is turned on. It is ready to accept packets for transmission and it may inject into the kernel packets received from other nodes on the network.
* LOOPBACK -- the interface does not communicate with other hosts. All packets sent through it will be returned and nothing but bounced packets can be received.
* BROADCAST -- the device has the facility to send packets to all hosts sharing the same link. A typical example is an Ethernet link.
* POINTOPOINT -- the link has only two ends with one node attached to each end. All packets sent to this link will reach the peer and all packets received by us came from this single peer.
				 If neither LOOPBACK nor BROADCAST nor POINTOPOINT are set, the interface is assumed to be NMBA (Non-Broadcast Multi-Access). This is the most generic type of device and the most complicated one, because the host attached to a NBMA link has no means to send to anyone without additionally configured information.

* MULTICAST -- is an advisory flag indicating that the interface is aware of multicasting i.e. sending packets to some subset of neighbouring nodes. Broadcasting is a particular case of multicasting, where the multicast group 			consists of all nodes on the link. It is important to emphasize that software must not interpret the absence of this flag as the inability to use multicasting on this interface. Any POINTOPOINT and BROADCAST 				link is multicasting by definition, because we have direct access to all the neighbours and, hence, to any part of them. Certainly, the use of high bandwidth multicast transfers is not recommended on 				broadcast-only links because of high expense, but it is not strictly prohibited.
* PROMISC -- the device listens to and feeds to the kernel all traffic on the link even if it is not destined for us, not broadcasted and not destined for a multicast group of which we are member. Usually this mode exists only on 				broadcast links and is used by bridges and for network monitoring.
* ALLMULTI -- the device receives all multicast packets wandering on the link. This mode is used by multicast routers.
* NOARP -- this flag is different from the other ones. It has no invariant value and its interpretation depends on the network protocols involved. As a rule, it indicates that the device needs no address resolution and that the 			software or hardware knows how to deliver packets without any help from the protocol stacks.
* DYNAMIC -- is an advisory flag indicating that the interface is dynamically created and destroyed.
* SLAVE -- this interface is bonded to some other interfaces to share link capacities.

Additional Flags (Not Documented?)
https://unix.stackexchange.com/questions/335077/ip-link-and-ip-addr-output-meaning

NO-CARRIER		Driver Signals L1 down

mtu 1500
	``maximal transfer unit''). This determines the maximal size of data which can be sent as a single packet over this interface.

qdisc, noqueue, qlen 1000
	qdisc (``queuing discipline'') shows the queuing algorithm used on the interface. Particularly, noqueue means that this interface does not queue anything and noop means that the interface is in blackhole mode i.e. all packets sent to it are immediately discarded. qlen is the default transmit queue length of the device measured in packets.


state	



==== Layer 1/2 ====
Use **ethtool** command to get layer 1 information about an ethernet port (speeds, is active, etc.). For example, we see that the link below is capable of 10Gigabit/second speeds, but is currently only running at a 1Gb/s (possible because the switch it is connected to only offers 1Gb/s).

'''
# ethtool eth0
Settings for eth0:
	Supported ports: [ TP ]
	Supported link modes:   100baseT/Full 
	                        1000baseT/Full 
	                        
'''
__10000baseT/Full__ 
''	Supported pause frame use: Symmetric''
''	Supports auto-negotiation: Yes''
''	Advertised link modes:  100baseT/Full ''
''	                        1000baseT/Full ''
							__10000baseT/Full__ 
''	Advertised pause frame use: Symmetric''
''	Advertised auto-negotiation: Yes''
	__Speed: 1000Mb/s__
''	Duplex: Full''
''	Port: Twisted Pair''
''	PHYAD: 0''
''	Transceiver: external''
''	Auto-negotiation: on''
''	MDI-X: Unknown''
''	Supports Wake-on: d''
''	Wake-on: d''
''	Current message level: 0x00000007 (7)''
''			       drv probe link''
''	Link detected: yes''

If the link were down, ethtool would tell you it could not detect the link. This would indicate hardware problems (the ethernet cable is not plugged in, you are looking at the wrong network device).
'''
Settings for eth0:
	Link detected: no
'''



You can also get a plethora of Layer 1/2 information about a particular network device by navigating to **/sys/class/net**
''$ cd /sys/class/net/''
To see all available interfaces
''$ ls -l''
To see more information about the **eth0** interface
''$ cd eth0''
Then for example, to see the MAC address of this device
''$ cat address''
To see if the device is actually up (1 means up)
''$ cat carrier''
You can even see statistics about the device. For example, to see how many packets this interface has received since it has been up.
''$ cat statistics/rx_packets''
Lastly, you can get all of this information in an easy to read format using a simple grep
'''
# pwd
/sys/class/net/eth0
 # grep "" * 2> /dev/null
addr_assign_type:0
address:a4:bf:01:27:1b:67
addr_len:6
broadcast:ff:ff:ff:ff:ff:ff
carrier:1
carrier_changes:2
dev_id:0x0
dev_port:0
dormant:0
duplex:full
flags:0x1003
'''

Source -> https://stackoverflow.com/questions/808560/how-to-detect-the-physical-connected-state-of-a-network-cable-connector

==== Layer 1/2/3 ====
Layer 3 information is fairly straightforward and can be obtained by simply invoking the **ip address** command (or **ip a** for short). **NO-CARRIER** indicates that their is no ethernet cable plugged in, or there is no Wi-Fi connection (either way, something is wrong at the hardware level).

'''
$ ip a
1: lo: <LOOPBACK,UP,LOWER_UP> mtu 65536 qdisc noqueue state UNKNOWN qlen 1
    link/loopback 00:00:00:00:00:00 brd 00:00:00:00:00:00
    inet 127.0.0.1/8 scope host lo
       valid_lft forever preferred_lft forever
    inet6 ::1/128 scope host 
       valid_lft forever preferred_lft forever
2: enp2s0f0: <BROADCAST,MULTICAST,UP,LOWER_UP> mtu 1500 qdisc mq state UP qlen 1000
    link/ether 00:25:90:71:02:9c brd ff:ff:ff:ff:ff:ff
    inet 10.1.155.1/16 brd 10.1.255.255 scope global enp2s0f0
       valid_lft forever preferred_lft forever
    inet6 fe80::225:90ff:fe71:29c/64 scope link 
       valid_lft forever preferred_lft forever
3: enp2s0f1: <NO-CARRIER,BROADCAST,MULTICAST,UP> mtu 1500 qdisc mq state DOWN qlen 1000
    link/ether 00:25:90:71:02:9d brd ff:ff:ff:ff:ff:ff
5: virbr0: <NO-CARRIER,BROADCAST,MULTICAST,UP> mtu 1500 qdisc noqueue state DOWN qlen 1000
    link/ether 52:54:00:c9:73:21 brd ff:ff:ff:ff:ff:ff
    inet 192.168.122.1/24 brd 192.168.122.255 scope global virbr0
       valid_lft forever preferred_lft forever
6: virbr0-nic: <BROADCAST,MULTICAST> mtu 1500 qdisc pfifo_fast master virbr0 state DOWN qlen 1000
    link/ether 52:54:00:c9:73:21 brd ff:ff:ff:ff:ff:ff
'''


==== Layer 4 ====
After IP addresses, the OS directs traffic via the use of ports. These ports are defined in the **/etc/services** file
$ head /etc/services


==== TCP / Netstat connection states ====
When you run netstat, you will see that a TCP connection can be in one of several states.

A connection progresses through a series of states during its lifetime. The states are: LISTEN, SYN-SENT, SYNRECEIVED,
ESTABLISHED, FIN-WAIT-1, FIN-WAIT-2, CLOSE-WAIT, CLOSING, LAST-ACK, TIME-WAIT, and
the fictional state CLOSED. CLOSED is fictional because it represents the state when there is no TCB, and
therefore, no connection. Briefly the meanings of the states are:

* LISTEN 
	represents waiting for a connection request from any remote TCP and port.
* SYN-SENT 
	represents waiting for a matching connection request after having sent a connection request.
* SYN-RECEIVED 
	represents waiting for a confirming connection request acknowledgment after having both received and sent a connection request.
* ESTABLISHED 
	represents an open connection, data received can be delivered to the user. The normal state for the data transfer phase of the connection.
* FIN-WAIT-1 
	represents waiting for a connection termination request from the remote TCP, or an acknowledgment of the connection termination request previously sent.
* FIN-WAIT-2 
	represents waiting for a connection termination request from the remote TCP.
* CLOSE-WAIT 
	represents waiting for a connection termination request from the local user.
* CLOSING 
	represents waiting for a connection termination request acknowledgment from the remote TCP.
* LAST-ACK 
	represents waiting for an acknowledgment of the connection termination request previously sent to the remote TCP (which includes an acknowledgment of its connection termination request).
* TIME-WAIT 
	represents waiting for enough time to pass to be sure the remote TCP received the acknowledgment of its connection termination request.
* CLOSED 
	represents no connection state at all.

A TCP connection progresses from one state to another in response to events. The events are the user calls,
OPEN, SEND, RECEIVE, CLOSE, ABORT, and STATUS; the incoming segments, particularly those containing
the SYN, ACK, RST and FIN flags; and timeouts.

{{.\pasted_image.png}}
