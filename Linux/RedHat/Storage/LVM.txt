Content-Type: text/x-zim-wiki
Wiki-Format: zim 0.4
Creation-Date: 2018-02-26T22:05:17-05:00

====== LVM ======
Created Monday 26 February 2018

==== Overview ====
https://access.redhat.com/documentation/en-us/red_hat_enterprise_linux/7/html/logical_volume_manager_administration/logical_volumes
Volume management creates a layer of abstraction over physical storage, allowing you to create logical storage volumes. This provides much greater flexibility in a number of ways than using physical storage directly. With a logical volume, you are not restricted to physical disk sizes. In addition, the hardware storage configuration is hidden from the software so it can be resized and moved without stopping applications or unmounting file systems. This can reduce operational costs.

Physical volumes are combined into volume groups (VGs). This creates a pool of disk space out of which logical volumes can be allocated.
Within a volume group, the disk space available for allocation is divided into units of a fixed-size called extents. An extent is the smallest unit of space that can be allocated. Within a physical volume, extents are referred to as physical extents.
A logical volume is allocated into logical extents of the same size as the physical extents. The extent size is thus the same for all logical volumes in the volume group. The volume group maps the logical extents to physical extents.

==== Extend a logical Volume By Adding a Disk ====
https://www.rootusers.com/how-to-increase-the-size-of-a-linux-lvm-by-adding-a-new-disk/

Add disk to system, make disk a physical volume, add disk to volume group, extend existing volume, resize filesystem.

Partition [[/dev/sdb]] (recommended https://unix.stackexchange.com/questions/14010/the-merits-of-a-partitionless-filesystem/14017#14017)
# parted /dev/sdb
# pvcreate [[/dev/sdb1]]
# vgextend vg0 [[/dev/sdb1]]
# lvextend /dev/vg0/root [[/dev/sdb1]]
If ext4 filesystem
# resize2fs [[/dev/vg0/root]]
If xfs filesystem
# xfs_growfs /dev/vg0/root

==== Extend a Logical Volume Using Existing Disk Space ====
After you have extended the logical volume it is necessary to increase the file system size to match.
https://access.redhat.com/documentation/en-us/red_hat_enterprise_linux/6/html/logical_volume_manager_administration/lv_extend
The following command extends the logical volume /dev/myvg/homevol to 12 gigabytes.
''# lvextend -L12G /dev/myvg/homevol'' 

The following command adds another gigabyte to the logical volume [[/dev/myvg/homevol.]]
''# lvextend -L+1G /dev/myvg/homevol''

The following command extends the logical volume called testlv to fill all of the unallocated space in the volume group myvg.
''# lvextend -l +100%FREE /dev/myvg/testlv''

Extend the underlying file system
If ext4 filesystem
''# resize2fs /dev/vg0/root''
If xfs filesystem
''# xfs_growfs /dev/vg0/root''

==== Logical Volume Types ====

== Linear Volumes ==
https://access.redhat.com/documentation/en-us/red_hat_enterprise_linux/7/html/logical_volume_manager_administration/lv_overview
A linear volume aggregates space from one or more physical volumes into one logical volume. For example, if you have two 60GB disks, you can create a 120GB logical volume. The physical storage is concatenated. This is similar to RAID-0 except the data is not physically striped across the disk, it is still sequential. As a result, read and write I/O will still be the same speed.

== Striped Logical Volumes (RAID-0) ==
Striping enhances performance by writing data to a predetermined number of physical volumes in round-robin fashion. With striping, I/O can be done in parallel. In some situations, this can result in near-linear performance gain for each additional physical volume in the stripe.

Data is written as stripes to each physical volume in the volume group simultaneously (in parallel). However, the size of the stripe cannot exceed the size of a physical extent, the smallest unit of data. Honestly, you might as well use mdadm to just configure RAID-0 for such a set up. LVM also supports other RAID configurations as well.

==== Creating Physical Volumes ====
LVM allows you to create physical volumes out of disk partitions. Red Hat recommends that you create a single partition that covers the whole disk to label as an LVM physical volume. In other words, do not create LVM physical volumes from multiple partitions of the same disk. It can be confusing and error prone. Make the whole disk a single physical volume. However note that there may be exceptions to this general rule.

If you are using a whole disk device for your physical volume, the disk must have no partition table. For DOS disk partitions, the partition id should be set to 0x8e using the fdisk or cfdisk command or an equivalent. For whole disk devices only the partition table must be erased, which will effectively destroy all data on that disk. You can remove an existing partition table by zeroing the first sector with the following command:

In other words, if you are trying to add a disk as a physical volume that previously had partitions on it, you must first clear the partition table by running the following command.
# dd if=/dev/zero of=/dev/sd? bs=512 count=1

Next initialize the physical volume, which is analogous to formatting the file system

'''
[root@storage dev]# lsblk -f
NAME         FSTYPE      LABEL UUID                                   MOUNTPOINT
sda                                                                   
├─sda1       xfs               1f7b8428-9fbe-4863-a43d-1ef7ce3f671c   /boot
└─sda2       LVM2_member       2ImvFZ-3sC8-hUdG-Z3Cv-1hw2-vhQe-k8drEf 
  ├─vg0-root xfs               001c73b1-0db0-40f9-85da-414f12e5cf28   /
  ├─vg0-swap swap              8a8e0b6b-a0f2-4ba6-8cf3-7faef392ca21   [SWAP]
  ├─vg0-tmp  xfs               48fd5f3d-7a35-4ad9-ad47-7f260b09cd88   /tmp
  ├─vg0-var  xfs               1647cf75-2e4b-4e90-94c2-9e09f57cebb1   /var
  └─vg0-home xfs               0049bac8-3e95-4ed9-b482-559ee55336f7   /home
sdc                                                                   
sdd                                                                   
sde                                                                   
sdf                                                                   
sr0                                                                   


[root@storage dev]# pvcreate /dev/sd{c,d,e,f}
  Device /dev/sdd not found (or ignored by filtering).
  Physical volume "/dev/sdc" successfully created.
  Physical volume "/dev/sde" successfully created.
  Physical volume "/dev/sdf" successfully created.
'''


You can also remove a physical volume. Although, you must first remove the physical volume from any volume groups in order to do so.

'''
[root@storage dev]# pvremove /dev/sd{c,d,e,f}
  Device /dev/sdd not found (or ignored by filtering).
  Labels on physical volume "/dev/sdc" successfully wiped.
  Labels on physical volume "/dev/sde" successfully wiped.
  Labels on physical volume "/dev/sdf" successfully wiped.
'''



We can see what disks or paritions are LVM physical volumes using the **pvs** command. Note, you can add additional "v" for more verbosity. Also note that the lvmdiskscan command has been deprecated. See the LVM Attributes section for information about the "Attr" collumn.

'''
[root@storage dev]# pvs -v -a
    Wiping internal VG cache
    Wiping cache of LVM-capable devices
  PV            VG  Fmt  Attr PSize   PFree  DevSize PV UUID                               
  /dev/sda1              ---       0      0  500.00m                                       
  /dev/sda2     vg0 lvm2 a--  <99.51g 14.63g  99.51g 2ImvFZ-3sC8-hUdG-Z3Cv-1hw2-vhQe-k8drEf
  /dev/sdc          lvm2 ---    8.00g  8.00g   8.00g yHaIgN-V0Hq-Ahkz-tqsm-nBaR-RXfV-oWEJ5w
  /dev/sde          lvm2 ---    8.00g  8.00g   8.00g Uh04Kj-l6dY-6Ugn-uBCO-uWUD-d8Sy-Mri6QK
  /dev/sdf          lvm2 ---    8.00g  8.00g   8.00g d3T3qk-2AzO-lFnE-CVzx-oFPM-WrOx-wIJRhc
  /dev/vg0/home          ---       0      0    9.75g                                       
  /dev/vg0/root          ---       0      0   34.12g                                       
  /dev/vg0/swap          ---       0      0    2.00g                                       
  /dev/vg0/tmp           ---       0      0   19.50g                                       
  /dev/vg0/var           ---       0      0   19.50g
'''
        


'''
[root@storage dev]# pvdisplay 
  --- Physical volume ---
  PV Name               /dev/sda2
  VG Name               vg0
  PV Size               99.51 GiB / not usable 3.00 MiB
  Allocatable           yes 
  PE Size               4.00 MiB
  Total PE              25474
  Free PE               3746
  Allocated PE          21728
  PV UUID               2ImvFZ-3sC8-hUdG-Z3Cv-1hw2-vhQe-k8drEf
   
  "/dev/sdc" is a new physical volume of "8.00 GiB"
  --- NEW Physical volume ---
  PV Name               /dev/sdc
  VG Name               
  PV Size               8.00 GiB
  Allocatable           NO
  PE Size               0   
  Total PE              0
  Free PE               0
  Allocated PE          0
  PV UUID               yHaIgN-V0Hq-Ahkz-tqsm-nBaR-RXfV-oWEJ5w   
...
  ...
'''


You can also resize physical volumes using the **pvresize** command. You should never need to do this. This is only applicable if the physical volume is a partition on a disk. Normally the physical volume should be the entire raw disk itself. Using a partition as a physical volume causes more problems than it is possibly worth as you would need to resize the partition and underlying file system before you can resize the physical volume. See the Partitions section for details.

==== Creating Volume Groups ====
https://access.redhat.com/documentation/en-us/red_hat_enterprise_linux/7/html/logical_volume_manager_administration/vg_admin
Very straight forward

'''
[root@storage ~]# pvs
  PV         VG  Fmt  Attr PSize   PFree 
  /dev/sda2  vg0 lvm2 a--  <99.51g 14.63g
  /dev/sdc       lvm2 ---    8.00g  8.00g
  /dev/sde       lvm2 ---    8.00g  8.00g
[root@storage ~]# vgcreate myVolumeGroup /dev/sd{c,e}
  Volume group "myVolumeGroup" successfully created
'''


'''
[root@storage dev]# vgs
  VG            #PV #LV #SN Attr   VSize   VFree 
  myVolumeGroup   2   0   0 wz--n-  15.99g 15.99g
  vg0             1   5   0 wz--n- <99.51g 14.63g
'''


'''
[root@storage dev]# vgdisplay myVolumeGroup
  --- Volume group ---
  VG Name               myVolumeGroup
  System ID             
  Format                lvm2
  Metadata Areas        2
  Metadata Sequence No  1
  VG Access             read/write
  VG Status             resizable
  MAX LV                0
  Cur LV                0
  Open LV               0
  Max PV                0
  Cur PV                2
  Act PV                2
  VG Size               15.99 GiB
  PE Size               4.00 MiB
  Total PE              4094
  Alloc PE / Size       0 / 0   
  Free  PE / Size       4094 / 15.99 GiB
  VG UUID               YHTO8k-sF0E-Q317-e0lq-G2JI-7nEN-aqs5dL
'''


To add physical volumes to the volume group, use the 

'''
[root@storage dev]# dd if=/dev/zero of=/dev/sdd bs=512 count=1
1+0 records in
1+0 records out
512 bytes (512 B) copied, 0.00129542 s, 395 kB/s
[root@storage dev]# pvcreate /dev/sdd
  Physical volume "/dev/sdd" successfully created.
'''

'''
[root@storage dev]# vgextend myVolumeGroup /dev/sdd
  Volume group "myVolumeGroup" successfully extended
'''


To remove pvs from vgs. The pv can then be used in another vg. Make sure the pv is not in use by any logical volumes first, by running **pvdisplay /dev/sdc**

'''
[root@storage dev]# vgreduce myVolumeGroup /dev/sdc
  Removed "/dev/sdc" from volume group "myVolumeGroup"
'''


To remove the vg entirely

'''
[root@storage dev]# vgremove myVolumeGroup
  Volume group "myVolumeGroup" successfully removed
[root@storage dev]# vgs
  VG  #PV #LV #SN Attr   VSize   VFree 
  vg0   1   5   0 wz--n- <99.51g 14.63g
'''


==== ADDING PHYSICAL VOLUMES TO A VOLUME GROUP ====

To add additional physical volumes to an existing volume group, use the vgextend command. The vgextend command increases a volume group's capacity by adding one or more free physical volumes.
The following command adds the physical volume /dev/sdf1 to the volume group vg1.

''# vgextend vg1 /dev/sdf1''

==== Creating Logical Volumes ====
https://access.redhat.com/documentation/en-us/red_hat_enterprise_linux/7/html/logical_volume_manager_administration/lv
You can name the logical volumes with the **-n** switch. The following creates a 10GB lv

'''
[root@storage dev]# lvcreate -L 10G -n testlv myVG
  Logical volume "testlv" created.
[root@storage dev]# lvs -v myVG/testlv
  LV     VG   #Seg Attr       LSize  Maj Min KMaj KMin Pool Origin Data%  Meta%  Move Cpy%Sync Log Convert LV UUID                                LProfile
  testlv myVG    2 -wi-a----- 10.00g  -1  -1  253    5                                                     Y97KB1-j0ZN-vLtQ-rEWA-78qU-8b4q-QNndau
'''
         

Remove with 

''[root@storage dev]# lvremove myVG/testlv''

==== LVM Attributes ====

When you run the show commands (pvs, vgs, lvs) you can see the attributes for the physical volume, volume group and logical volume respectively.
The meaning of these attributes can be found in their corresponding man pages (man pvs, man vgs, man lvs). Search for attr.

	   ''The pv_attr bits are:''
''       1  (d)uplicate, (a)llocatable, (u)sed''
''       2  e(x)ported''
''       3  (m)issing''

''[tpulliam@zephyr CentOS7_kickstart]$ sudo pvs''
''  PV         VG  Fmt  Attr PSize   PFree ''
''  /dev/sdb5  vg0 lvm2 a--  170.17g 34.02g''



	   ''The vg_attr bits are:''
''       1  Permissions: (w)riteable, (r)ead-only''
''       2  Resi(z)eable''
''       3  E(x)ported''
''       4  (p)artial: one or more physical volumes belonging to the volume group are missing from the system''
''       5  Allocation policy: (c)ontiguous, c(l)ing, (n)ormal, (a)nywhere''
''       6  (c)lustered, (s)hared''

'''
[tpulliam@zephyr CentOS7_kickstart]$ sudo vgs
  VG  #PV #LV #SN Attr   VSize   VFree 
  vg0   1   6   0 wz--n- 170.17g 34.02g
'''


'''
The lv_attr bits are:
1 Volume type: (m)irrored, (M)irrored without initial sync, (o)rigin, (O)rigin with merging snapshot, (r)aid, (R)aid without initial sync, (s)napshot, merging (S)napshot, (p)vmove, (v)irtual, mirror or raid (i)mage, mirror or raid (I)mage out-of-sync, mirror (l)og device, under (c)onversion, thin (V)olume, (t)hin pool, (T)hin pool data, raid or thin pool m(e)tadata 
2 Permissions: (w)riteable, (r)ead-only, (R)ead-only activation of non-read-only volume 
3 Allocation policy: (a)nywhere, (c)ontiguous, (i)nherited, c(l)ing, (n)ormal This is capitalised if the volume is currently locked against allocation changes, for example during pvmove(8). 
4 fixed (m)inor 
5 State: (a)ctive, (s)uspended, (I)nvalid snapshot, invalid (S)uspended snapshot, snapshot (m)erge failed, suspended snapshot (M)erge failed, mapped (d)evice present without tables, mapped device present with (i)nactive table 
6 device (o)pen
7 Target type: (m)irror, (r)aid, (s)napshot, (t)hin, (u)nknown, (v)irtual. This groups logical volumes related to the same kernel target together. So, for example, mirror images, mirror logs as well as mirrors themselves appear as (m) if they use the original device-mapper mirror kernel driver; whereas the raid equivalents using the md raid kernel driver all appear as (r). Snapshots using the original device-mapper driver appear as (s); whereas snapshots of thin volumes using the new thin provisioning driver appear as (t).
8 Newly-allocated data blocks are overwritten with blocks of (z)eroes before use. 
9 (p)artial: One or more of the Physical Volumes this Logical Volume uses is missing from the system. 
'''

'''

[tpulliam@zephyr CentOS7_kickstart]$ sudo lvs
  LV     VG  Attr       LSize    Pool   Origin Data%  Meta%  Move Log Cpy%Sync Convert
  home   vg0 Vwi-aotz--  <14.98g pool00        49.83                                  
  pool00 vg0 twi-aotz-- <129.98g               11.04  64.29                           
  root   vg0 Vwi-aotz--   80.00g pool00        6.07                                   
  swap   vg0 -wi-ao----   <6.15g                                                      
  tmp    vg0 Vwi-aotz--   15.00g pool00        2.56                                   
  var    vg0 Vwi-aotz--   20.00g pool00        8.21
'''
