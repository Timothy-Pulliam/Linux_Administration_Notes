Content-Type: text/x-zim-wiki
Wiki-Format: zim 0.4
Creation-Date: 2017-09-27T23:38:32-04:00

====== Data Analysis with Python ======
Created Wednesday 27 September 2017

==== Setting up an environment for Data Analysis ====

'''
$ mkdir -p code/data_analysis && cd code/data_analysis
$ python -m venv my-virtualenv
$ . venv/bin/activate
$ pip install -U pip
$ pip install ipython numpy pandas scipy matplotlib
'''


==== IPython ====
IPython is like a the python shell on steroids. It can do so much more that the standard shell. You can start IPython in a shell using the command below.

'''
$ ipython
Python 3.5.2 (v3.5.2:4def2a2901a5, Jun 26 2016, 10:47:25) 
Type 'copyright', 'credits' or 'license' for more information
IPython 6.2.0 -- An enhanced Interactive Python. Type '?' for help.

In [1]: import matplotlib

In [2]: import numpy

In [3]: import pandas

'''
== --pylab Is Bad ==
TL;DR
**ipython --pylab** pollutes the namespace (see %pylab once inside Ipython). For more information see this article
https://carreau.github.io/posts/10-No-PyLab-Thanks.html

==== Parsing JSON Data ====

''Sample json data can be found at reddit https://www.reddit.com/.json ''

'''
>>> from urllib import request
>>> url = 'https://reddit.com/.json'
>>> response = request.urlopen(url)
>>> text = response.read()
'''


You can convert the JSON in string format to a python dictionary for better manipulation. Note that the text returned by an HTTP response is of class bytes, and that the json.loads function takes a string. Therfore, you will need to decode the bytes object to string using UTF-8 formatting.

'''
>>> import json
>>> type(text)
<class 'bytes'>
>>> type(reddit_json)
<class 'dict'>
'''


If you print the reddit_json variable, all output will be on a single line, hard to read. Using pretty printing, you can view the JSON data in an easy to read format.

'''
>>> import pprint
>>> pprint.pprint(reddit_json)
'''


..... [Very long output] .....

Unfortunately, the output is very long. So long in fact that we can't read the first couple of lines. We can manually dig through the JSON by searching by key value pairs.

'''
>>> reddit_json.keys()
dict_keys(['kind', 'data'])
>>> reddit_json['kind']
'Listing'
'''


The **kind** keyword, only had one value associated with it. However the **data** key has lots of key value pairs inside of it. So we continue the process.

'''
>>> reddit_json['data'].keys()
dict_keys(['modhash', 'whitelist_status', 'before', 'children', 'after'])
>>> reddit_json['data']['modhash']
''
>>> reddit_json['data']['whitelist_status']
'all_ads'
>>> reddit_json['data']['before']
'''


So far nothing interesting. The real data is in the following key value pair.

'''
>>> data = reddit_json['data']['children']
>>> pprint.pprint(data[0]['data'])
'''


Pretty straightforward. Suppose we want to get the list of subreddits for each post. We could do something like the following.

'''
>>> for post in data:
...     print(post['data']['subreddit'])
... 
aww
news
pics
gifs
'''


We can go a step further and see how many of the subreddits which have posts start with a letter that is a vowel.

'''
>>> for post in data:
...     if post['data']['subreddit'][0].lower() in ('a','e','i','o','u'):
...         count += 1
'''



==== Formatting Data with Pandas ====

If you pass pandas.DataFrame a list of python dictionaries pandas will give you row by column representation of the key value pairs, similar to Excel or SQL.

'''
>>> import pandas
>>> from pandas import DataFrame, Series
>>> data = [ reddit_json['data']['children'][post]['data'] for post in range(len(reddit_json['data']['children']))]
>>> frame = DataFrame(data)
'''
  

Pandas DataFrame will organize all of the data from all of the data elements according to JSON keys.

	  ''In [51]: frame.keys()''
''Out[51]: ''
''Index(['approved_at_utc', 'approved_by', 'archived', 'author',''
''       'author_flair_css_class', 'author_flair_text', 'banned_at_utc',''
''       'banned_by', 'brand_safe', 'can_gild', 'can_mod_post', 'clicked',''
''       'contest_mode', 'created', 'created_utc', 'distinguished', 'domain',''
''       'downs', 'edited', 'gilded', 'hidden', 'hide_score', 'id',''
''       'is_crosspostable', 'is_self', 'is_video', 'likes',''
''       'link_flair_css_class', 'link_flair_text', 'locked', 'media',''
''       'media_embed', 'mod_reports', 'name', 'num_comments', 'num_crossposts',''
''       'num_reports', 'over_18', 'parent_whitelist_status', 'permalink',''
''       'pinned', 'post_hint', 'preview', 'quarantine', 'removal_reason',''
''       'report_reasons', 'saved', 'score', 'secure_media',''
''       'secure_media_embed', 'selftext', 'selftext_html', 'spoiler',''
''       'stickied', 'subreddit', 'subreddit_id', 'subreddit_name_prefixed',''
''       'subreddit_type', 'suggested_sort', 'thumbnail', 'thumbnail_height',''
''       'thumbnail_width', 'title', 'ups', 'url', 'user_reports', 'view_count',''
''       'visited', 'whitelist_status'],''
''      dtype='object')''


We can now list the posts by title and upvote. We will only return the first 4 results.

'''
In [59]: frame[['title','ups']][:4]
Out[59]: 
                                                title    ups
0   The ridiculously photogenic german police and ...  15840
1                 US health secretary Tom Price quits  14572
2                  He likes racing me down the stairs  32174
3   Victims of the Chinese Revolution lie beheaded...   8037
'''

   

This data can even be plotted using ipython's built in matplotlib capabilities.
'''
In [76]: frame[['title','ups']].plot()
Out[76]: <matplotlib.axes._subplots.AxesSubplot at 0x10c339240>
'''

{{../../../..images/Matplotlib_demo.png?width=377}}



