Content-Type: text/x-zim-wiki
Wiki-Format: zim 0.4
Creation-Date: 2017-10-04T16:04:00-04:00

====== Flask ======
Created Wednesday 04 October 2017

==== Required Software ====
You will need the following to code a Flask App
* Atom IDE https://ide.atom.io/
* Access to BASH (Cygwin if you are on Windows)
* Python3

==== Setting up a Flask Environment ====
I will be demonstrating how to build a flask app by making a frontend for Ansible. First we must create the project's directory structure and install Flask.

'''
$ mkdir -p ~/code/Ansible_UI
$ cd ~/code/Ansible_UI
$ git init
$ cat << EOF >> .git/info/exclude 
> *~
> venv
> *.pyc
> __pycache__
> EOF
$ python3 -m venv venv
$ . venv/bin/activate
$ pip install -U pip
$ pip install Flask
$ pip freeze > requirements.txt
'''



==== Hello Flask ====
A minimum working Flask will have the following structure
''   Ansible_UI''
'''
├── config.py
├── myapp.py
├── requirements.txt
└── venv/
'''


'''
$ touch myapp.py config.py 

'''
== myapp.py ==
'''
#!/usr/bin/env python
from flask import Flask

app = Flask(__name__)
app.config.from_pyfile('config.py')

@app.route('/')
@app.route('/index')
def index():
    return 'Hello, World!'

if __name__ == '__main__':
    app.run(host='0.0.0.0', port=8080)
'''


== config.py ==
'''
DEBUG = True
# Set the secret key to some random bytes. Keep this really secret!
SECRET_KEY = 'a8251ffb76f32d3e97937a92ed554c72'


'''
== app.secret_key ==
http://flask.pocoo.org/docs/1.0/quickstart/#sessions
https://stackoverflow.com/questions/34902378/where-do-i-get-a-secret-key-for-flask/34903502
https://en.wikipedia.org/wiki/Cross-site_request_forgery

app.secret_key should be a randomly generated string. It is used for securing sessions on the client side to protect against Cross-site request forgery attacks. This is handled through a **Flask.session** object which allows you to store information specific to a user from one request to the next in a secure way. This is implemented on top of cookies for you and signs the cookies cryptographically. What this means is that a user could look at the contents of your cookie but not modify it, unless they know the secret key used for signing. In order to use sessions you have to set a secret key.

You can generate a secret key using 
'''
$ python -c 'import os; print(os.urandom(16).hex())'
'''
	 ''adadb355cf0063a5eee6fb4e63b23737''
	

== Running the App ==
Run **myapp.py** using [[./myapp.py]] and then visit http://localhost:8080 in your web browser. You should be greeted with "Hello, World!"

==== Separating Views from myapp.py ====
Okay, this works and it is great, but in reality we are going to have many more views that just the root '/' and 'index'. Because of this, it would be easier for us to maintain if we gave the views their own separate file.
Our codebase will end up looking as follows

'''
.
├── config.py
├── myapp.py*
├── requirements.txt
├── venv/
└── views.py
'''


$ mkdir views.py

== views.py ==
'''
from myapp import app

@app.route('/')
@app.route('/index')
def index():
    return "Hello, World!"
'''


== myapp.py ==
In order to use the views located in the ''views.py'' file, we need to tell the main **app** object where they are located (I.E. we need to import them). This is known as a circular import. The circular import import views from views.py, but views.py imports app from myapp.py. Thus these two files depend on each other for the program to work correctly.

'''
#!/usr/bin/env python
from flask import Flask

app = Flask(__name__)
app.config.from_pyfile('config.py')

'''
	  ''from views import *''

''if __name__ == '__main__':''
''    app.run(host='0.0.0.0', port=8080)''


==== HTML - Creating A Base Template ====
Now we are finally ready to start creating some HTML. We could start by creating a Navbar that will show up on every page. We can do this by creating a Base template. By default, Flask looks for HTML templates in a directory called **templates**. So we must create this directory. In the end, our codebase should look something like this:

'''
.
├── config.py
├── myapp.py*
├── requirements.txt
├── templates/
│   ├── base.html
│   └── index.html
├── venv/
└── views.py
'''


$ mkdir templates
$ touch templates/{base.html,index.html}

== index.html ==
index.html extends our base.html file, which is to say it adds to it. This is nice because instead of having to put the code for our navbar in every HTML file, we can put it into one file (base.html) and every HTML file will extend that file. This drastically reduces the amount of files we must maintain.

We must inform the index.html template where it will place content from base.html.

'''
{% extends "base.html" %}
{% block content %}

<h1>Welcome</h1>

{% endblock %}
'''


== base.html ==
We must inform the base.html template where to place HTML from index.html. This is acheived by using ''{% block content %}{% endblock %} Jinja2 tags''. This will cause everything in  {% block content %} of the index.html to be placed into the {% block content %} of base.html template (in this case a simple <h1> element).

The following HTML makes use of a bootstrap navbar from https://www.w3schools.com/bootstrap/bootstrap_navbar.asp . In order for us to be able to use bootstrap, we need to load bootstrap from a CDN. This is done using a **<link>** element. For more information on using bootstrap see https://getbootstrap.com/docs/3.3/getting-started/ .

'''
<!DOCTYPE html>
<html>
<head>
  <title>Ansible UI</title>

  <!-- Latest compiled and minified CSS -->
  <link rel="stylesheet" href="https://maxcdn.bootstrapcdn.com/bootstrap/3.3.7/css/bootstrap.min.css" integrity="sha384-BVYiiSIFeK1dGmJRAkycuHAHRg32OmUcww7on3RYdg4Va+PmSTsz/K68vbdEjh4u" crossorigin="anonymous">
</head>

<body>
  <!-- Navbar -->
  <nav class="navbar navbar-inverse">
    <div class="container-fluid">
      <div class="navbar-header">
        <a class="navbar-brand" href="#">Dashboard</a>
      </div>
      <ul class="nav navbar-nav">
        <li class="active"><a href="#">Jobs</a></li>
        <li><a href="#">Inventories</a></li>
        <li><a href="#">Playbooks</a></li>
      </ul>
      <ul class="nav navbar-nav navbar-right">
        <li><a href="#"><span class="glyphicon glyphicon-user"></span> Sign Up</a></li>
        <li><a href="#"><span class="glyphicon glyphicon-log-in"></span> Login</a></li>
      </ul>
    </div>
  </nav>

  {% block content %}{% endblock %}
</body>
</html>
'''


== views.py ==
In order to view HTML templates we need to use the **flask.render_template** function built into flask.

'''
from myapp import app
import flask

@app.route('/')
@app.route('/index')
def index():
    return flask.render_template('index.html')
'''

You should see something like the following image

{{.\pasted_image.png}}

==== Adding A Favicon ====
http://flask.pocoo.org/docs/1.0/patterns/favicon/
Create a new directory named static. This is where static content will be placed (Javascript, Images, CSS, non-templated HTML).

$ mkdir static 

Go to below website, select image you want to faviconize. Generate 16x16 only. Uncheck Maintain Image Dimensions (We want it to be square). You will be given an image to download. Place this image into your static directory.
https://www.favicon-generator.org/

Our codebase will now look like this

'''
.
├── config.py
├── myapp.py*
├── requirements.txt
├── static/
|   ├── favicon.ico
├── templates/
│   ├── base.html
│   └── index.html
├── venv/
└── views.py
'''

Next, add the following line in [[/templates/base.html]] in the <head></head> section
''<link rel="shortcut icon" href="{{ url_for('static', filename='favicon.ico') }}">''

== Troubleshooting ==
1) Try clearing your browser's cache
2) Close ALL of your browser windows
3) Try another browser (IE, Firefox, Chrome, etc.)

==== Custom 404 Page ====

== views.py ==
'''
@app.errorhandler(404)
def page_not_found(error):
    return flask.render_template("404.html"), 404
'''


== templates/404.html ==
$ touch templates/404.html
'''

<div align='center'>
    <h1>404</h1>
    <h3>Page Not Found</h3>
</div>
'''


==== Creating A Login Page ====
https://www.owasp.org/index.php/Password_Storage_Cheat_Sheet

Next we are going to create a login page so that users must log in to view the rest of the website. Users without an existing account can register one. Existing users can simply log in with their username and passwords. To do this we are going to install a few more Flask extensions

== Flask-Login ==
$ pip install Flask-Login

**Flask-Login** allows you to control whether users are "logged in" or "logged out", as well as control what pages (views) users can see when they are logged in or out. For example, if a user is not logged in, they should not be able to view a profile page. But once they log in, they should be able to view their own profile page only (not anybody else's). Flask login also

will:

* Store the active user’s ID in the session, and let you log them in and out easily.
* Let you restrict views to logged-in (or logged-out) users.
* Handle the normally-tricky “remember me” functionality.
* Help protect your users’ sessions from being stolen by cookie thieves.
* Possibly integrate with Flask-Principal or other authorization extensions later on.

will not:

* Impose a particular database or other storage method on you. You are entirely in charge of how the user is loaded.
* Restrict you to using usernames and passwords, OpenIDs, or any other method of authenticating.
* Handle permissions beyond “logged in or not.”
* Handle user registration or account recovery.

== Flask-WTF ==
$ pip install Flask-WTF

If we are going to use HTML forms with Flask, it will be easier if we use the python module **Flask-WTF**. More information can be found at https://flask-wtf.readthedocs.io/en/stable/ . After installing the Flask add-on, it would be a good idea to update our requirements.txt file.

$ pip freeze > requirements.txt

Any time a user enters data into our website, they will use a web form. Because our website will have many forms, it is a good idea to keep forms in their own file named forms.py. This will help cut down on clutter from putting too much code in one single file. 

Next, we are going to create a login page so that we can display (render) our forms to the user. Users can sign up when they first visit the website or login if they already have a user account. For this, we will need a login.html template.

At the end we will have a codebase that looks like the following
'''
.
├── config.py
├── forms.py
├── myapp.py
├── requirements.txt
├── static/
|   └── favicon.ico
├── templates/
│   ├── base.html
│   ├── index.html
│   └── login.html
├── venv/
└── views.py
'''


== forms.py ==
$ touch forms.py

Add the following to the forms.py module. Right now the form does not do anything.

'''
from flask_wtf import FlaskForm
from wtforms import StringField, PasswordField, BooleanField
from wtforms.validators import DataRequired, InputRequired, Email, Length
'''


'''
class LoginForm(FlaskForm):
    email = StringField('email', validators=[InputRequired(), Email(), Length(max=40)])
    password = PasswordField('password', validators=[InputRequired()])
    remember = BooleanField('remember me')
    submit = SubmitField('submit')
'''


== views.py ==
We need a view to display our new form. The following view redirects any login as long as any username and password are supplied to the [[/index.html]] page.

	  ''from forms import LoginForm''

'''
@app.route('/login', methods=['POST', 'GET'])
def login():
    form = LoginForm()
    if form.validate_on_submit():
        return flask.redirect('/index')
    return flask.render_template('login.html', form=form)
'''


== templates/login.html ==

https://blog.miguelgrinberg.com/post/the-flask-mega-tutorial-part-iii-web-forms
"The HTML <form> element is used as a container for the web form. The action attribute of the form is used to tell the browser the URL that should be used when submitting the information the user entered in the form. When the action is set to an empty string the form is submitted to the URL that is currently in the address bar, which is the URL that rendered the form on the page. The method attribute specifies the HTTP request method that should be used when submitting the form to the server. The default is to send it with a GET request, but in almost all cases, using a POST request makes for a better user experience because requests of this type can submit the form data in the body of the request, while GET requests add the form fields to the URL, cluttering the browser address bar. The novalidate attribute is used to tell the web browser to not apply validation to the fields in this form, which effectively leaves this task to the Flask application running in the server. Using novalidate is entirely optional, but for this first form it is important that you set it because this will allow you to test server-side validation later in this chapter."

Using Jinja2 tags for labels, makes it so that if a user clicks on the label instead of the text box, the text box is still selected. Notice that this login template also displays any errors the form may have queued up. In this case we are checking for validation errors.

$ touch templates/login.html

'''
{% extends "base.html" %}

{% block content %}

    <h1>Sign In</h1>
    <form action="" method="post" novalidate>
        {{ form.hidden_tag() }}
        <p>
            {{ form.username.label }}<br />
            {{ form.username(size=32) }}<br />
            {% for error in form.username.errors %}
            <span style="color: red;">{{ error }}</span>
            {% endfor %}
        </p>
        <p>
            {{ form.password.label }}<br />
            {{ form.password(size=32) }}<br />
            {% for error in form.password.errors %}
            <span style="color: red;">{{ error }}</span>
            {% endfor %}
        </p>
        <p>{{ form.remember_me() }} {{ form.remember_me.label }}</p>
        <p>{{ form.submit() }}</p>
    </form>
{% endblock %}
'''


You can center the form and give it a nice border as well
'''
<div style="justify-content: center; display: flex; align-items: center;">
  <div style="text-align: center; border: solid; padding: 10px; display: inline-block;">
    <form action="" method="post" novalidate>
'''
...
...
'''
    </form>
  </div>
</div>
'''

{{.\pasted_image001.png}}

==== Best Practice - Replacing URLs with View Function Names ====
Throughout this example, we have been hardcoding URLs into our views and templates. This is a bad idea because our links (/login, [[/logout,]] [[/app/thingy/foobar,]] etc) could all change in the future as we redesign our code base and move files and directories around. A much better idea is to reference our view functions in views.py (index, login) as these should not change. For example here we replace "/index" with url_for('index')

== views.py ==
	  ''from forms import LoginForm''
	  __from flask import url_for__

'''
@app.route('/login', methods=['POST', 'GET'])
def login():
    form = LoginForm()
    if form.validate_on_submit():
        return flask.redirect(
'''
__url_for('index')__'')''
''    return flask.render_template('login.html', form=form)''


These will now now reference the index and login functions in our views.py file, which each load their respective templates using the **@app.route() **decorator. This makes it so that if the link changes in the future, we need only update it one time in the views.py file in the decorator for our view function. We will eventually do this same thing for all the links in our base.html template as well.

''<a class="navbar-brand" href="{{ url_for('dashboard') }}">Dashboard</a>''

== Restricting Access ==
At this point, we can see the login screen if we visit http://localhost:8080/login. But we can still see other webpages as well. We want to restrict access to these routes until a user has successfully authenticated.





==== Creating User Database with Flask-SqlAlchemy ====
https://blog.miguelgrinberg.com/post/the-flask-mega-tutorial-part-iv-database
Now that we have a log in page, we will need to have a database to store usernames, password hashes and email addresses so users can be created and log in. We will also need a database to store ansible related information, such as number of hosts, number of hostgroups, inventory files, playbooks, errors that get logged, etcetera. For the database we will be using Flask-SqlAlchemy. Documentation can be found at http://flask-sqlalchemy.pocoo.org/2.3/ . Flask-SqlAlchemy adds SqlAlchemy support into our Flask project. SqlAlchemy is a python package that allows us to interact with MySQL and SQLite databases using Python code instead of worrying about the actual SQL language itself.

$ pip install Flask-sqlalchemy
$ pip freeze > requirements.txt


== Visualizing Databases - Designing SQL Tables ==
You can create database tables an visualize relationships by using the following website

http://ondras.zarovi.cz/sql/demo/
https://github.com/ondras/wwwsqldesigner/wiki

==== Database Migrations ====
Any time you change the schema of your database, you must migrate it. This is dangerous however, because you can't just simply delete the database and recreate a new one as there is a huge potential for loss of data. Instead, what happens is you must take a "snapshot" or "backup" of the current state of your database so that you can migrate to a newer schema. That way if the new schema breaks something in your application, you can always revert back to a previous version. Think of it like git for databases.

$ pip install flask-migrate
$ pip freeze > requirements.txt

== config.py ==
The following configuration assumes you are using an sqlite database. Adjust accordingly for other database engines. We set SQLALCHEMY_TRACK_MODIFICATIONS to False to supress a harmless warning message.
http://flask-sqlalchemy.pocoo.org/2.3/config/


'''
import os
basedir = os.path.abspath(os.path.dirname(__file__))

# Database Settings
SQLALCHEMY_DATABASE_URI = 'sqlite:///' + os.path.join(basedir, 'app.db')
SQLALCHEMY_TRACK_MODIFICATIONS = False

'''
== myapp.py ==
'''
#!/usr/bin/env python
from flask import Flask
from flask_sqlalchemy import SQLAlchemy
from flask_migrate import Migrate

app = Flask(__name__)
app.config.from_pyfile('config.py')
db = SQLAlchemy(app)
migrate = Migrate(app, db)

from views import *
from models import *

if __name__ == '__main__':
    app.run(host='0.0.0.0', port=8080)
'''


== models.py ==
'''
from myapp import db

class User(db.Model):
    id = db.Column(db.Integer, primary_key=True)
    username = db.Column(db.String(64), index=True, unique=True)
    email = db.Column(db.String(120), index=True, unique=True)
    password_hash = db.Column(db.String(128))

    def __repr__(self):
        return '<User {}>'.format(self.username)
'''


We can instantiate a sample user in the python shell for testing (from the root of our project directory)

	>>> from models import User
	>>> user = User(username='Timothy Pulliam', email='timothy.pulliam@email.com')
	>>> user
	<User Timothy Pulliam>


==== Completing the Login Process with Flask-Login ====
