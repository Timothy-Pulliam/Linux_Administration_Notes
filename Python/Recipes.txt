Content-Type: text/x-zim-wiki
Wiki-Format: zim 0.4
Creation-Date: 2017-09-27T20:46:39-04:00

====== Recipes ======
Created Wednesday 27 September 2017

==== References ====
https://medium.com/the-andela-way/idiomatic-python-coding-the-smart-way-cc560fa5f1d6

==== File Manipulations ====

=== Reading Text from a file ===
The following method explicitly closes the file when done.

'''
with open('data.txt', 'r') as myfile:
    data=myfile.read().replace('\n', '')
'''


== Writing Text to a file ==
The following appends a line to an existing file

'''
with open('data.txt', 'a') as myfile:
    myfile.write("Appending a line to my file")

'''
The following deletes the contents of a file and writes to a new blank file

'''
with open('data.txt', 'w') as myfile:
    myfile.write("Accidently deleted my whole file!")

'''
== Create a file if it does not exist ==
The following creates the file "data.txt" if it does not exist. If it does exist an error is returned. This should be a safe way of creating (touching) files.

''def touch(filename):''
'''
return open(filename, "x")
'''


==== Text Manipulations ====

==== Template Strings ====
https://docs.python.org/3.7/library/string.html#template-strings
Variables within a text file that can be replaced by variables in your python code.

from string import Template

>>> s = Template('$who likes $what')
>>> s.substitute(who='tim', what='kung pao')
'tim likes kung pao'
>>> foods = ['pizza', 'ice cream']
>>> names = ['tim', 'nicole']
>>>
>>> for name, food in zip(names, foods):
...     a.substitute(who=name, what=food)
...
'tim likes pizza'
'nicole likes ice cream'

== Regular Expressions with Python ==
Below is an example, cloning the functionality of grep (unfinished)

'''
import re
from sys import argv


def grep(pattern, infile):

    p = re.compile(pattern)
    with open(infile, 'r') as _infile:
        return p.search(_infile.read().replace('\n','')).group()

if __name__ == '__main__':
    pattern, infile = argv[1:3]
    print(grep(pattern, infile))
'''




== Getting Current Time ==
'''
import time
now = time.strftime("%a, %d %b %Y %H:%M:%S +0000", time.gmtime())
print(now)
'''


==== Operating System / Filesystem Manipulations ====

== Change Directory (ls, pwd, cd, etc.) ==
import os

# cd
os.chdir(path)
# pwd
os.getcwd()
# ls
files = os.listdir(path)
# rm file
os.remove(filename)
# rm empty directory
os.rmdir(directory)
# rm directory and contents recursively
shutil.rmtree(directory)

== Get User Information ==
import os
>>> os.environ
>>> os.getuid()
0
>>> os.getlogin()
'root'
>>> os.getgroups()
[0]
>>> os.getenv('HOME')
'/root'



== Running Shell Commands ==
'''
from subprocess import run
def ls():
    run(['ls', '-l', '-a'])
'''


Better Yet
'''
from subprocess import run

def bash(command):
    return run(command.split())
'''


==== SSH With Python ====

Q: Why isn't [[~/.ssh/known_hosts]] being updated?
A:
https://stackoverflow.com/questions/39523216/paramiko-add-host-key-to-known-hosts-permanently

pip install paramiko

'''
from paramiko import client
from paramiko import AutoAddPolicy

ssh_client = client.SSHClient()
ssh_client.load_system_host_keys()
# Suppress "Server 'localhost' not found in known_hosts" errors by auto adding unknown host keys (this is dangerous)
ssh_client.set_missing_host_key_policy(AutoAddPolicy())
ssh_client.connect('localhost', port=22, username=username,password=password, allow_agent=False,look_for_keys=False)
stdin, stdout, stderr = ssh_client.exec_command('ls -l')
'''

'''
# Get command output
stdout.read()

# Close Connection
client.close()
'''

https://medium.com/@keagileageek/paramiko-how-to-ssh-and-file-transfers-with-python-75766179de73

== Providing Input ==
Sometimes you need to provide a password or extra input to run a command. This is what stdin is used for. Let’s run the same command above with sudo.

'''
stdin, stdout, stderr = ssh.exec_command(“sudo ls”)
stdin.write(‘mypassword\n’)
print stdout.readlines()
'''


== Downloading Files (SCP) ==
'''
ftp_client=ssh_client.open_sftp()
ftp_client.get(‘remotefilepath’,’localfilepath’)
ftp_client.close()
'''


== Uploading Files ==
'''
ftp_client=ssh_client.open_sftp()
ftp_client.put(‘localfilepath’,remotefilepath’)
ftp_client.close()
'''


==== Sending Email ====
https://medium.freecodecamp.org/send-emails-using-code-4fcea9df63f
http://naelshiab.com/tutorial-send-email-python/
import email
import smtplib



==== Security Recipes ====

== Hashing a File ==
The code below simulates the md5sum command from linux. You can also replace hashlib.md5() with hashlib.sha256(), hashlib.512() etcetera to use other hashing algorithms.

https://www.pythoncentral.io/hashing-files-with-python/
"The file is opened in rb mode, which means that you are going to read the file in binary mode. This is because the MD5 function needs to read the file as a sequence of bytes. This will make sure that you can hash any type of file, not only text files."
"It is important to notice the read function. When it is called with no arguments, like in this case, it will read all the contents of the file and load them into memory. This is dangerous if you are not sure of the file's size. A better version will be:"


''import hashlib''

''def md5sum(filename):''
'''

BLOCKSIZE = 65536
hasher = hashlib.md5()
with open(filename, 'rb') as afile:
    buf = afile.read(BLOCKSIZE)
    while len(buf) > 0:
        hasher.update(buf)
        buf = afile.read(BLOCKSIZE)
print(hasher.hexdigest())
'''
	   ''return hasher.hexdigest()''


==== Scripting ====

=== Getting User input for Scripts ===
'''
from sys import argv

command = argv

def print_usage():
	print("""
Synopsis:
	The ceaser cipher is a simple cipher for encrypting and decrypting messages.

Usage:
	cipher --encrypt|-e|--decrypt|-d --key|-k [--file|-f]
	cipher --help|-h

Options:
	-f, --file
		Using the --file option allows you to specify a text file 
		that should be encrypted or decrypted. Otherwise, a message will be 
		provided via the terminal.
""")

if __name__ == '__main__':
	if '-h' in command or '--help' in command:
		print_usage()
	elif '-e' in command or '--encrypt' in command:
		mode = 'encrypt'
		key = command[2]
	elif '-d' in command or '--decrypt' in command:
		mode = 'decrypt'
		key = command[2]
	if '-f' in command or '--file' in command:
		message = command[3]
'''


== Getting User input for scripts with argparse ==
I did not write the following script, I forget where it came from. I should update once I find the source.

'''
#!/usr/bin/env python

import argparse
import sys


class FakeGit(object):

    def __init__(self):
        parser = argparse.ArgumentParser(
            description='Pretends to be git',
            usage='''git <command> [<args>]
The most commonly used git commands are:
   commit     Record changes to the repository
   fetch      Download objects and refs from another repository
''')
        parser.add_argument('command', help='Subcommand to run')
        # parse_args defaults to [1:] for args, but you need to
        # exclude the rest of the args too, or validation will fail
        args = parser.parse_args(sys.argv[1:2])
        if not hasattr(self, args.command):
            print('Unrecognized command')
            parser.print_help()
            exit(1)
        # use dispatch pattern to invoke method with same name
        getattr(self, args.command)()

    def commit(self):
        parser = argparse.ArgumentParser(
            description='Record changes to the repository')
        # prefixing the argument with -- means it's optional
        parser.add_argument('--amend', action='store_true')
        # now that we're inside a subcommand, ignore the first
        # TWO argvs, ie the command (git) and the subcommand (commit)
        args = parser.parse_args(sys.argv[2:])
        print('Running git commit, amend=%s' % args.amend)

    def fetch(self):
        parser = argparse.ArgumentParser(
            description='Download objects and refs from another repository')
        # NOT prefixing the argument with -- means it's not optional
        parser.add_argument('repository')
        args = parser.parse_args(sys.argv[2:])
        print('Running git fetch, repository=%s' % args.repository)
'''



if __name__ == '__main__':
	FakeGit()
