Content-Type: text/x-zim-wiki
Wiki-Format: zim 0.4
Creation-Date: 2018-09-24T11:16:44-04:00

====== tkinter ======
Created Monday 24 September 2018

==== References ====
http://effbot.org/tkinterbook/tkinter-index.htm

==== Toplevel Widget ====
http://effbot.org/tkinterbook/toplevel.htm


'''
class Application(tk.Frame):
    def __init__(self, master=None):
        super().__init__(master)
	master.title("My Awesome Application")
        self.pack()
        self.create_widgets()

    def create_widgets(self):
        self.hi_there = tk.Button(self)
        self.hi_there["text"] = "Hello World\n(click me)"
        self.hi_there["command"] = self.say_hi
        self.hi_there.pack(side="top")

        self.quit = tk.Button(self, text="QUIT", fg="red",
                              # command=root.destroy)
        self.quit.pack(side="bottom")
'''
             
'''
     def say_hi(self):
'''

'''
        print("hi there, everyone!")
'''

 

'''
if __name__ == '__main__':
    
    root = tk.Tk()
    app = Application(master=root)
    app.mainloop()
'''


==== Placing Label to Left of Text Field ====
Unfortunately, I have yet to find a way to easily do this. The only way seems to be to manually create the grid geometry.

	''def create_widgets(self):''

''        self.hostname_label = tk.Label(self, text="Hostname/IP")''
''        self.hostname_label.grid(row=0)''
''        self.hostname = tk.Entry(self)''
''        self.hostname.grid(row=0, column=1)''
''        self.username_label = tk.Label(self, text="username")''
''        self.username_label.grid(row=1)''
''        self.username = tk.Entry(self)''
''        self.username.grid(row=1, column=1)''
''        self.password_label = tk.Label(self, text="password")''
''        self.password_label.grid(row=2)''
''        self.password = tk.Entry(self, show="*", width=15)''
''        self.password.grid(row=2, column=1)''
''        self.submit = tk.Button(self, text="Submit", command=self.submit)''
''        self.submit.grid(row=4)''

==== Passing Arguments to Button ====
There are two ways to pass an argument to a button's callback. The first is probably the easiest to implement and extend. It uses a wrapper function. In the below example, no arguments are passed to the callback, the wrapper function handles the retrieving of arguments and such.

		''class Application(tk.Frame):''
'''
	...
	...
   self.submit = tk.Button(self, text="Submit", command=self.submit)
	...
   def submit(self):
        hostname = self.hostname.get()
        username = self.username.get()
        password = self.password.get()
        ssh(hostname, username, password)
        plot()
'''

The second way, and more restrictive is to use lambda functions. Using lambda functions produces more concise code, however you are limited to what the lambda function can do.
https://stackoverflow.com/questions/6920302/how-to-pass-arguments-to-a-button-command-in-tkinter

==== Get text from Entry/Text widget (AttributeError: NoneType object has no attribute get) ====
https://stackoverflow.com/questions/1101750/tkinter-attributeerror-nonetype-object-has-no-attribute-get


==== Grid Geometry ====
http://effbot.org/tkinterbook/grid.htm
