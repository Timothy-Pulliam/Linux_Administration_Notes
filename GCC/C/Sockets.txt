Content-Type: text/x-zim-wiki
Wiki-Format: zim 0.4
Creation-Date: 2019-02-12T10:38:01-05:00

====== Sockets ======
Created Tuesday 12 February 2019

https://www.codeproject.com/Articles/586000/Networking-and-Socket-programming-tutorial-in-C

== Socket-server.c ==

'''
#include <sys/socket.h>
#include <netinet/in.h>
#include <arpa/inet.h>
#include <stdio.h>
#include <stdlib.h>
#include <unistd.h>
#include <errno.h>
#include <string.h>
#include <sys/types.h>
 
int main(void)
{
  int listenfd = 0,connfd = 0;
  
  struct sockaddr_in serv_addr;
 
  char sendBuff[1025];  
  int numrv;  
 
  listenfd = socket(AF_INET, SOCK_STREAM, 0);
  printf("socket retrieve success\n");
  
  memset(&serv_addr, '0', sizeof(serv_addr));
  memset(sendBuff, '0', sizeof(sendBuff));
      
  serv_addr.sin_family = AF_INET;    
  serv_addr.sin_addr.s_addr = htonl(INADDR_ANY); 
  serv_addr.sin_port = htons(5000);    
 
  bind(listenfd, (struct sockaddr*)&serv_addr,sizeof(serv_addr));
  
  if(listen(listenfd, 10) == -1){
      printf("Failed to listen\n");
      return -1;
  }     
  
  while(1)
    {      
      connfd = accept(listenfd, (struct sockaddr*)NULL ,NULL); // accept awaiting request
  
      strcpy(sendBuff, "Message from server");
      write(connfd, sendBuff, strlen(sendBuff));
 
      close(connfd);    
      sleep(1);
    } 
 
  return 0;
}
'''


== Socket-client.c ==

'''
#include <sys/socket.h>
#include <sys/types.h>
#include <netinet/in.h>
#include <netdb.h>
#include <stdio.h>
#include <string.h>
#include <stdlib.h>
#include <unistd.h>
#include <errno.h>
#include <arpa/inet.h>
 
int main(void)
{
  int sockfd = 0,n = 0;
  char recvBuff[1024];
  struct sockaddr_in serv_addr;
 
  memset(recvBuff, '0' ,sizeof(recvBuff));
  if((sockfd = socket(AF_INET, SOCK_STREAM, 0))< 0)
    {
      printf("\n Error : Could not create socket \n");
      return 1;
    }
 
  serv_addr.sin_family = AF_INET;
  serv_addr.sin_port = htons(5000);
  serv_addr.sin_addr.s_addr = inet_addr("127.0.0.1");
 
  if(connect(sockfd, (struct sockaddr *)&serv_addr, sizeof(serv_addr))<0)
    {
      printf("\n Error : Connect Failed \n");
      return 1;
    }
 
  while((n = read(sockfd, recvBuff, sizeof(recvBuff)-1)) > 0)
    {
      recvBuff[n] = 0;
      if(fputs(recvBuff, stdout) == EOF)
    {
      printf("\n Error : Fputs error");
    }
      printf("\n");
    }
 
  if( n < 0)
    {
      printf("\n Read Error \n");
    }
 
  return 0;
}
'''


==== Explanation ====

{{.\pasted_image.png}}

1) Creating the socket

int socket(int domain, int type, int protocol)

* Domain	AF_UNIX - connect inside same machine AF_INET – connect with different machine
* Type		SOCK_STREAM – TCP connection SOCK_DGRAM – UDP connection
* Protocol	Define here when there is any additional protocol. Otherwise, define it as 0

Next, decide which struct needs to be used based on what domain is used above.

AF_UNIX
Use struct sockaddr_un if you are using AF_UNIX on your domain. It is required to include <sys/un.h>

#include <sys/un.h>
...
...
'''
struct sockaddr_un
  {
    sa_family_t sun_family ;
    char sun_path[];
  };
'''

AF_INET
Use struct sockaddr_in if you are using AF_INT on your domain.

'''
struct sockaddr_in
  {
    short int  sin_family ;
    int        sin_port;
    struct in_addr sin_addr;
  };
'''


In this article, I will explain sockadd_in that showed in the code above.


serv_addr.sin_family = AF_INET;
Define the domain used

serv_addr.sin_addr.s_addr = htonl(INADDR_ANY);
Permit any incoming IP address by declaring INADDR_ANY

serv_addr.sin_port = htons(5000);
Declare port 5000 to be used.

Based on the example above, server is using port 5000. You can check it by running "netstat -plant" or "ss -plant"
