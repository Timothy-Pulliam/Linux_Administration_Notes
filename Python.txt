Content-Type: text/x-zim-wiki
Wiki-Format: zim 0.4
Creation-Date: 2017-09-05T13:05:45-04:00

====== Python ======
Created Tuesday 05 September 2017

=== Mini Web Server ===
From terminal or powershell, run
$ python -m http.server

You should now be able to access all files in your current working directory from a browser. This is very useful for testing RedHat kickstart files or just sharing files and scripts.

{{../../..images/python_mini_http_server.PNG}}

=== Built in debugger (pdb) ===
To debug a python script

''$ python -m pdb myscript.py''

Once in the debugger, here are some useful commands
* h - get list of available commands
* l - show current line in source code
* n - execute next line in script
* p - print the value of a python variable

==== Python Packages ====
https://stackoverflow.com/questions/7948494/whats-the-difference-between-a-python-module-and-a-python-package
Any Python file is a module, its name being the file's base name without the .py extension. A package is a collection of Python modules: while a module is a single Python file, a package is a directory of Python modules containing an additional __init__.py file, to distinguish a package from a directory that just happens to contain a bunch of Python scripts. Packages can be nested to any depth, provided that the corresponding directories contain their own __init__.py file.

The distinction between module and package seems to hold just at the file system level. When you import a module or a package, the corresponding object created by Python is always of type module. Note, however, when you import a package, only variables/functions/classes in the __init__.py file of that package are directly visible, not sub-packages or modules. As an example, consider the xml package in the Python standard library: its xml directory contains an __init__.py file and four sub-directories; the sub-directory etree contains an __init__.py file and, among others, an ElementTree.py file. See what happens when you try to interactively import package/modules:

'''
>>> import xml
>>> type(xml)
<type 'module'>
>>> xml.etree.ElementTree
Traceback (most recent call last):
  File "<stdin>", line 1, in <module>
AttributeError: 'module' object has no attribute 'etree'
>>> import xml.etree
>>> type(xml.etree)
<type 'module'>
>>> xml.etree.ElementTree
Traceback (most recent call last):
  File "<stdin>", line 1, in <module>
AttributeError: 'module' object has no attribute 'ElementTree'
>>> import xml.etree.ElementTree
>>> type(xml.etree.ElementTree)
<type 'module'>
>>> xml.etree.ElementTree.parse
<function parse at 0x00B135B0>
'''


==== __init__.py file (How to create a python package) ====
http://effbot.org/pyfaq/what-is-init-py-used-for.htm
https://docs.python.org/3/tutorial/modules.html#packages

Files named __init__.py are used to mark directories on disk as a Python package directories. If you have the files

'''
mydir/spam/__init__.py
mydir/spam/module.py
'''

and mydir is on your path, you can import the code in module.py as:

	''import spam.module''
or
	''from spam import module''
If you remove the __init__.py file, Python will no longer look for submodules inside that directory, so attempts to import the module will fail.

The __init__.py file is usually empty, but can be used to export selected portions of the package under more convenient names, hold convenience functions, etc. Given the example above, the contents of the __init__ module can be accessed as

	''import spam''

https://www.pythoncentral.io/how-to-create-a-python-package/

== __main__.py (or how to run packages using "python -m package") ==

'__main__' is the name of the scope in which top-level code executes. A module’s __name__ is set equal to '__main__' when read from standard input, a script, or from an interactive prompt.

A module can discover whether or not it is running in the main scope by checking its own __name__, which allows a common idiom for conditionally executing code in a module when it is run as a script or with python -m but not when it is imported:

if __name__ == "__main__":
	# execute only if run as a script
	main()
For a package, the same effect can be achieved by including a __main__.py module, the contents of which will be executed when the module is run with -m.

simply place any code you want to be executed into __main__.py like below, and it will be executed when you run "python -m mypackage"

[[./mypackage/__main__.py]]
'''
if __name__ == '__main__':
    print('hello')
'''


$ python -m mypackage
hello

==== __future__ statements ====
https://docs.python.org/3/reference/simple_stmts.html#future-statements
https://www.python.org/dev/peps/pep-0236/
Future statements are used to ease the transition of code going from one incompatible version of python to the next. For example, say you have some code written in python2.7 and you are in the process of rewritting it for python3. What you can do is rewrite the 2.7 code in sections, using a future statement for each section that you rewrite, until your code is finally fully rewritten in python3. This is the easiest way.

A future statement is a directive to the compiler that a particular module should be compiled using syntax or semantics that will be available in a specified future release of Python where the feature becomes standard. A future statement must appear near the top of the module (before any other import statements).

For example, if you are using python 2.7, but you want to use the print function from python3, you would do

''from __future__ import print_function''

**Note** that there is nothing special about the statement:

''import __future__ [as name]''

That is NOT a future statement; it’s an ordinary import statement with no special semantics or syntax restrictions.


==== Python Source Encoding ====
https://www.python.org/dev/peps/pep-0263/

You may see python modules that start with the following lines

'''
#!/usr/bin/python
# -*- coding: utf-8 -*-
import os, sys
...
'''


The second line informs python what type of encoding it should use to parse the source code. This coding line must appear on either line 1 or 2. If this line does not appear python will default to ascii encodings.


==== Functional Programming, Function Wrappers, Decorators (And "Syntactic Sugar") ====
https://realpython.com/primer-on-python-decorators/

Basically, a decorator takes a function as input and modifies it in some way.

Assume we have the following function (and inner functions) defined.

'''
def my_decorator(func):
    def wrapper():
        print("Something is happening before the function is called.")
        func()
        print("Something is happening after the function is called.")
    return wrapper

'''
The following decorator 

''@my_decorator''
''def say_whee():''
''    print("Whee!")''

Is the equivalent of saying

'''
def say_whee():
    print("Whee!")

say_whee = my_decorator(say_whee)
'''


When called, produces the following output

'''
>>> say_whee()
Something is happening before the function is called.
Whee!
Something is happening after the function is called.
'''



* Decorators can be nested


==== Extending Python with C or C++ ====
https://docs.python.org/3.6/extending/extending.html

https://www.reddit.com/r/learnpython/comments/9ny6df/how_can_python_use_things_written_in_other/
As a practical matter, I think the scenario you have in mind is: you want to write a top-level program but at some point in it you want to take advantage of or call upon code written in some other language, typically C[++]. There are various options.

One, avoid the need entirely by finding comparable functionality somewhere in the Python ecosphere, starting with the standard library. Everything there is implemented in C and carefully optimized. Next is the vast array of 3rd-party software found via PyPi such as numpy, highly optimized math routines.

Two, if the external code is already packaged as a stand-alone app, you can invoke it as if from the command line and collect its output using subprocess.

Finally if the external C/C++ code is a module and you want to call into it you (or somebody) has to write a "wrapper" for it, a thin layer of code that mediates between Python's parameter-passing conventions and those of C, this is documented here.
