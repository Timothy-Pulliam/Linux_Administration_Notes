Content-Type: text/x-zim-wiki
Wiki-Format: zim 0.4
Creation-Date: 2018-09-05T07:29:51-04:00

====== An Ansible Primer ======
Created Wednesday 05 September 2018

# Overview

Ansible allows you to run scripts (ansible playbooks) against many systems at the same time in an automated fasion. The benefits of this of this are tremendous.

* Ansible playbooks are Idempotent. You can run the same playbook on a host multiple times and there will be no adverse effects, the results are the same every time. This reduces the chance of a script having unintended consequences. Of course, there are ways write code that is NOT Idempotent, however such code is not best practice and is discouraged.
* Ansible playbooks are easy to write and read. They are based on YAML configuration files and the Python programming languauge, both are easy on the eyes, even for people who do not program often.
* Ansible is agentless, everything is done over SSH. You only need to install ansible on one "master" system and you are ready to use it. Because you don't need to install an agent on the clients, you save time by using Ansible.

You may be thinking this is not new, bash scripts have existed for a long time. This is true, however, the more time you save by not worrying about the implemenatation writing an automation system from the ground up, frees you up to actually do the automation itself. Ansible also enforces best practices, so you know if what you are doing is difficult, maybe it wasn't meant to be done in the first place.

## Installation
Ansible is easy to set up. As I have said, you need only install it one "master" server. However you can run Ansible from any system you can SSH from.

$ yum install ansible


## Testing the Waters with Ad-Hoc Commands

Before we unleash ansible's true power, we will get warmed up with what ansible calls "Ad-Hoc Commands". Ad-Hoc commands are one off commands. You wouldn't write a script or playbook for them. Maybe you just want to test a feature of ansible real quick. In this example, it won't be apparent why you would want to use ansible for this task, but these are the fundamentals of Ansible which we will build off of later.

$ ansible all --module-name=ping --inventory=$TARGET_HOST, --user=$SSH_USER --ask-pass

Or equivalently,

$ ansible all -m ping -i $TARGET_HOST, -u $SSH_USER -k

### What Is Going On

When we run this command, we are supplying a list of hosts to ansible. The list is just the single host $TARGET_HOST. The "all" argument instructs ansible to run our command on every host in this list. It is also necessary when running Ad-Hoc commands that our host ends with a comma ($TARGET_HOST,)

--module-name=ping
This argument tells ansible which built in ansible command we want to run against the list of hosts we have supplied. We are using the simplest module, the [[https://docs.ansible.com/ansible/latest/modules/ping_module.html|ping]] module. Note that this is not really a true ICMP ping. When Ansible uses ping, ansible will ssh to $TARGET_HOST to make sure it can access the host. This is ansible's version of ping.

--inventory=$TARGET_HOST, 
This is our list of hosts to run the command against. As I have said, for Ad-Hoc commands, the list of hosts must end with a comma

--user=$SSH_USER --ask-pass
The SSH credentials to use when running the Ad-Hoc command.

Output

### Troubleshooting

### Ad-Hoc Commands with Many Hosts

Most of the time, when you run ansible, you will be running a command against many hosts at a time. Instead of having to type the hostnames over and over again, you can place them inside of an inventory file. An inventory file is a list of hosts to run a command against.

[root@tpulliam ~]# vim hosts
[root@tpulliam ~]# cat hosts
[prod]
host1.prod.example.com
host2.prod.example.com
host3.prod.example.com


[test]
host[1:3].test.example.com

This host file splits our hosts into two groups, a prod group and a test group. For the test group, we use a short cut for the host file to avoid having to type similar host names for each line. We can now use our previous ad-hoc command with these groups

$ ansible test --module-name=ping --inventory=hosts --user=$SSH_USER --ask-pass

Here is what is happening

We are instructing ansible to look in the file [[./hosts]] for a list of hosts to run the ping command against. "ansible test" instructs ansible to only run this command against hosts that are in the test group. Ansible will SSH using $SSH_USER and the password supplied through a secure terminal. This user must have SSH access from the server you are running this command on in order for this to work.

If you instead wanted to run the command against all hosts (prod and test), we could simply replace test with all.

$ ansible all --module-name=ping --inventory=hosts --user=$SSH_USER --ask-pass

### The Shell Ad-Hoc Command
Another useful Ad-Hoc command is the shell module. This allows you to run arbitrary shell code on the supplied list of hosts in the inventory file. For example, suppose we want the disk uitilization on all of the production hosts in our inventory file

[root@tpulliam ansible]# ansible prod --module-name=shell --args="df -h" --inventory=hosts --user=$SSH_USER --ask-pass

It's just that simple. Hopefully by now you are already convinced of the potential that Ansible has. Although I assure you, this is just the tip of the iceberg.

## Configuring Ansible - ansible.cfg

At this point, we are ready to start making an ansible project. We will create an ansible.cfg config file. Now our ansible project looks something like this.

ansible/
├── ansible.cfg
└── hosts

Instead of having to give ansible --user=$SSH_USER and --ask-pass everytime we run a command, we can just put this information in our ansible.cfg file and ansible will know to use it everytime. An example ansible.cfg can be found [[https://raw.githubusercontent.com/ansible/ansible/devel/examples/ansible.cfg|here]]. You can also see an explanation of what each parameter means [[https://docs.ansible.com/ansible/2.4/intro_configuration.html|here]].

[root@tpulliam ansible]# cat ansible.cfg
remote_user = $SSH_USER
ask_pass = True

Now we can run our df command as follows

[root@tpulliam ansible]# ansible prod --module-name=shell --args="df -h" --inventory=hosts

## Scripting with Playbooks

So far we have only been running simple Ad-Hoc commands. Ansible one liners are good for some things, but for most things, you will want an entire script. For example, you may want to write a script to automate the provisioning of a new server, including package installation, setting up mounted filesystems and so forth. You may also want to script the process of creating an NFS server/client pair, or a DNS or HTTP server or any other server you use frequently. These scripts are called playbooks.

Playbooks are written in a language called YAML. The benefits of using YAML is that it is very easy to read, although it can be tricky to write at first. YAML is EXTREMELY sensitive to whitespace. You must have the correct number of spaces in your YAML file or you will get an unhelpful error. Because of this, it is very important when writing ansible playbooks to use a text editor that will auto indent your ansible as well as an ansible linter. At the very least, check out this online [[http://www.yamllint.com/|YAML linter]].



 A very useful thing to note about YAML is that it is a superset of JSON, meaning any JSON data can be written in YAML (but not necessarily the other way around). Going back to our ping example, a playbook to ping all of our hosts would look like the following.


[root@tpulliam ansible]# cat playbook.yml
'''
---
- hosts: all
  tasks:
  - name: Check hosts with ping
    ping:
      data: PING!
'''


Having our playbook, our project looks now looks like this

ansible/
├── ansible.cfg
├── playbook.yml
└── hosts

### Playbook Line by Line
Let's break this playbook down, line by line. The first '---' must be present at the top of the file. It signifies a YAML file.

'''
- hosts: all
'''

Going back to our inventory file (hosts), this instructs ansible to run this playbook on all hosts. If we only wanted to run the playbook on our test hosts, we could replace "all" with "test"

''tasks:''

This is the start of the commands that the playbook will run

'''
  - name: Check hosts are up with ping
'''

A human readable name for the task. This can be anything you want, as long as it clearly conveys what the commands are doing and why to a non technical person.

'''
    ping:
      data: PING!
'''

The ping command. It takes one optional argument, which is the data returned by the host upon a sucessful ping. In this case the data is just a string which says "PING!".

## More Advanced Playbooks

Okay so that was a simple example. Let's look at something practical and useful. Let's use the following playbook instead to configure a system after installation.

